{"version":3,"file":"bundle.cjs","sources":["../src/style/cell.ts","../src/style/core.ts","../src/style/row.ts","../src/formatters/checkboxFormatter.tsx","../src/hooks/useLayoutEffect.ts","../src/hooks/useFocusRef.ts","../src/DataGridDefaultComponentsProvider.ts","../src/formatters/SelectCellFormatter.tsx","../src/formatters/valueFormatter.tsx","../src/formatters/toggleGroupFormatter.tsx","../src/hooks/useRowSelection.ts","../src/Columns.tsx","../src/utils/colSpanUtils.ts","../src/utils/domUtils.ts","../src/utils/keyboardUtils.ts","../src/utils/renderMeasuringCells.tsx","../src/utils/selectedCellUtils.ts","../src/utils/styleUtils.ts","../src/utils/index.ts","../src/hooks/useCalculatedColumns.ts","../src/hooks/useGridDimensions.ts","../src/hooks/useLatestFunc.ts","../src/hooks/useRovingCellRef.ts","../src/hooks/useViewportColumns.ts","../src/hooks/useViewportRows.ts","../src/headerRenderer.tsx","../src/HeaderCell.tsx","../src/HeaderRow.tsx","../src/Cell.tsx","../src/Row.tsx","../src/GroupCell.tsx","../src/GroupRow.tsx","../src/SummaryCell.tsx","../src/SummaryRow.tsx","../src/EditCell.tsx","../src/DragHandle.tsx","../src/sortStatus.tsx","../src/DataGrid.tsx","../src/editors/textEditor.tsx"],"sourcesContent":["import { css } from '@linaria/core';\n\nexport const cell = css`\n  @layer rdg.Cell {\n    /* max-content does not work with size containment\n     * dynamically switching between different containment styles incurs a heavy relayout penalty\n     * Chromium bug: at odd zoom levels or subpixel positioning, layout/paint containment can make cell borders disappear\n     *   https://bugs.chromium.org/p/chromium/issues/detail?id=1326946\n     */\n    contain: style;\n    position: relative; /* needed for absolute positioning to work */\n    padding-block: 0;\n    padding-inline: 8px;\n    border-inline-end: 1px solid var(--rdg-border-color);\n    border-block-end: 1px solid var(--rdg-border-color);\n    grid-row-start: var(--rdg-grid-row-start);\n    background-color: inherit;\n\n    white-space: nowrap;\n    overflow: hidden;\n    overflow: clip;\n    text-overflow: ellipsis;\n    outline: none;\n\n    &[aria-selected='true'] {\n      outline: 2px solid var(--rdg-selection-color);\n      outline-offset: -2px;\n    }\n  }\n`;\n\nexport const cellClassname = `rdg-cell ${cell}`;\n\nexport const cellFrozen = css`\n  @layer rdg.Cell {\n    position: sticky;\n    /* Should have a higher value than 0 to show up above unfrozen cells */\n    z-index: 1;\n  }\n`;\n\nexport const cellFrozenClassname = `rdg-cell-frozen ${cellFrozen}`;\n\nexport const cellFrozenLast = css`\n  @layer rdg.Cell {\n    box-shadow: calc(2px * var(--rdg-sign)) 0 5px -2px rgba(136, 136, 136, 0.3);\n  }\n`;\n\nexport const cellFrozenLastClassname = `rdg-cell-frozen-last ${cellFrozenLast}`;\n","import { css } from '@linaria/core';\nimport { row } from './row';\n\nconst lightTheme = `\n  --rdg-color: #000;\n  --rdg-border-color: #ddd;\n  --rdg-summary-border-color: #aaa;\n  --rdg-background-color: hsl(0deg 0% 100%);\n  --rdg-header-background-color: hsl(0deg 0% 97.5%);\n  --rdg-row-hover-background-color: hsl(0deg 0% 96%);\n  --rdg-row-selected-background-color: hsl(207deg 76% 92%);\n  --rdg-row-selected-hover-background-color: hsl(207deg 76% 88%);\n\n  --rdg-checkbox-color: hsl(207deg 100% 29%);\n  --rdg-checkbox-focus-color: hsl(207deg 100% 69%);\n  --rdg-checkbox-disabled-border-color: #ccc;\n  --rdg-checkbox-disabled-background-color: #ddd;\n`;\n\nconst darkTheme = `\n  --rdg-color: #ddd;\n  --rdg-border-color: #444;\n  --rdg-summary-border-color: #555;\n  --rdg-background-color: hsl(0deg 0% 13%);\n  --rdg-header-background-color: hsl(0deg 0% 10.5%);\n  --rdg-row-hover-background-color: hsl(0deg 0% 9%);\n  --rdg-row-selected-background-color: hsl(207deg 76% 42%);\n  --rdg-row-selected-hover-background-color: hsl(207deg 76% 38%);\n\n  --rdg-checkbox-color: hsl(207deg 100% 79%);\n  --rdg-checkbox-focus-color: hsl(207deg 100% 89%);\n  --rdg-checkbox-disabled-border-color: #000;\n  --rdg-checkbox-disabled-background-color: #333;\n`;\n\nconst root = css`\n  @layer rdg {\n    @layer Defaults,\n      FocusSink,\n      CheckboxInput,\n      CheckboxIcon,\n      CheckboxLabel,\n      Cell,\n      HeaderCell,\n      SummaryCell,\n      EditCell,\n      Row,\n      HeaderRow,\n      SummaryRow,\n      GroupedRow,\n      Root;\n\n    @layer Defaults {\n      *,\n      *::before,\n      *::after {\n        box-sizing: inherit;\n      }\n    }\n\n    @layer Root {\n      ${lightTheme}\n      --rdg-selection-color: #66afe9;\n      --rdg-font-size: 14px;\n\n      display: grid;\n\n      color-scheme: var(--rdg-color-scheme, light dark);\n\n      /* https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_Positioning/Understanding_z_index/The_stacking_context */\n      /* We set a stacking context so internal elements don't render on top of external elements. */\n      contain: strict;\n      content-visibility: auto;\n      block-size: 350px;\n      border: 1px solid var(--rdg-border-color);\n      box-sizing: border-box;\n      overflow: auto;\n      background-color: var(--rdg-background-color);\n      color: var(--rdg-color);\n      font-size: var(--rdg-font-size);\n\n      /* needed on Firefox */\n      &::before {\n        content: '';\n        grid-column: 1/-1;\n        grid-row: 1/-1;\n      }\n\n      &.rdg-dark {\n        --rdg-color-scheme: dark;\n        ${darkTheme}\n      }\n\n      &.rdg-light {\n        --rdg-color-scheme: light;\n      }\n\n      @media (prefers-color-scheme: dark) {\n        &:not(.rdg-light) {\n          ${darkTheme}\n        }\n      }\n    }\n  }\n`;\n\nexport const rootClassname = `rdg ${root}`;\n\nconst viewportDragging = css`\n  @layer rdg.Root {\n    user-select: none;\n\n    & .${row} {\n      cursor: move;\n    }\n  }\n`;\n\nexport const viewportDraggingClassname = `rdg-viewport-dragging ${viewportDragging}`;\n\nexport const focusSinkClassname = css`\n  @layer rdg.FocusSink {\n    grid-column: 1/-1;\n    pointer-events: none;\n    /* Should have a higher value than 2 to show up above header row */\n    z-index: 3;\n  }\n`;\n","import { css } from '@linaria/core';\n\nexport const row = css`\n  @layer rdg.Row {\n    display: contents;\n    line-height: var(--rdg-row-height);\n    background-color: var(--rdg-background-color);\n\n    &:hover {\n      background-color: var(--rdg-row-hover-background-color);\n    }\n\n    &[aria-selected='true'] {\n      background-color: var(--rdg-row-selected-background-color);\n\n      &:hover {\n        background-color: var(--rdg-row-selected-hover-background-color);\n      }\n    }\n  }\n`;\n\nexport const rowClassname = `rdg-row ${row}`;\n\nexport const rowSelected = css`\n  @layer rdg.FocusSink {\n    outline: 2px solid var(--rdg-selection-color);\n    outline-offset: -2px;\n  }\n`;\n\nexport const rowSelectedClassname = 'rdg-row-selected';\n\nexport const rowSelectedWithFrozenCell = css`\n  @layer rdg.FocusSink {\n    &::before {\n      content: '';\n      display: inline-block;\n      height: 100%;\n      position: sticky;\n      inset-inline-start: 0;\n      border-inline-start: 2px solid var(--rdg-selection-color);\n    }\n  }\n`;\n","import clsx from 'clsx';\nimport { css } from '@linaria/core';\n\nimport type { CheckboxFormatterProps } from '../types';\n\nconst checkboxLabel = css`\n  @layer rdg.CheckboxLabel {\n    cursor: pointer;\n    display: flex;\n    align-items: center;\n    justify-content: center;\n    position: absolute;\n    inset: 0;\n    margin-inline-end: 1px; /* align checkbox in row group cell */\n  }\n`;\n\nconst checkboxLabelClassname = `rdg-checkbox-label ${checkboxLabel}`;\n\nconst checkboxInput = css`\n  @layer rdg.CheckboxInput {\n    all: unset;\n  }\n`;\n\nconst checkboxInputClassname = `rdg-checkbox-input ${checkboxInput}`;\n\nconst checkbox = css`\n  @layer rdg.CheckboxIcon {\n    content: '';\n    inline-size: 20px;\n    block-size: 20px;\n    border: 2px solid var(--rdg-border-color);\n    background-color: var(--rdg-background-color);\n\n    .${checkboxInput}:checked + & {\n      background-color: var(--rdg-checkbox-color);\n      outline: 4px solid var(--rdg-background-color);\n      outline-offset: -6px;\n    }\n\n    .${checkboxInput}:focus + & {\n      border-color: var(--rdg-checkbox-focus-color);\n    }\n  }\n`;\n\nconst checkboxClassname = `rdg-checkbox ${checkbox}`;\n\nconst checkboxLabelDisabled = css`\n  @layer rdg.CheckboxLabel {\n    cursor: default;\n\n    .${checkbox} {\n      border-color: var(--rdg-checkbox-disabled-border-color);\n      background-color: var(--rdg-checkbox-disabled-background-color);\n    }\n  }\n`;\n\nconst checkboxLabelDisabledClassname = `rdg-checkbox-label-disabled ${checkboxLabelDisabled}`;\n\nexport function checkboxFormatter(\n  { onChange, ...props }: CheckboxFormatterProps,\n  ref: React.RefObject<HTMLInputElement>\n) {\n  function handleChange(e: React.ChangeEvent<HTMLInputElement>) {\n    onChange(e.target.checked, (e.nativeEvent as MouseEvent).shiftKey);\n  }\n\n  return (\n    <label\n      className={clsx(checkboxLabelClassname, {\n        [checkboxLabelDisabledClassname]: props.disabled\n      })}\n    >\n      <input\n        type=\"checkbox\"\n        ref={ref}\n        {...props}\n        className={checkboxInputClassname}\n        onChange={handleChange}\n      />\n      <div className={checkboxClassname} />\n    </label>\n  );\n}\n","// eslint-disable-next-line @typescript-eslint/no-restricted-imports\nimport { useEffect, useLayoutEffect as useOriginalLayoutEffect } from 'react';\n\n// Silence silly warning\n// https://reactjs.org/link/uselayouteffect-ssr\nexport const useLayoutEffect = typeof window === 'undefined' ? useEffect : useOriginalLayoutEffect;\n","import { useRef } from 'react';\nimport { useLayoutEffect } from './useLayoutEffect';\n\nexport function useFocusRef<T extends HTMLOrSVGElement>(isSelected: boolean) {\n  const ref = useRef<T>(null);\n\n  useLayoutEffect(() => {\n    if (!isSelected) return;\n    ref.current?.focus({ preventScroll: true });\n  }, [isSelected]);\n\n  return {\n    ref,\n    tabIndex: isSelected ? 0 : -1\n  };\n}\n","import { createContext, useContext } from 'react';\n\nimport type { Renderers, Maybe } from './types';\n\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nconst DataGridDefaultComponentsContext = createContext<Maybe<Renderers<any, any>>>(undefined);\n\nexport const DataGridDefaultComponentsProvider = DataGridDefaultComponentsContext.Provider;\n\nexport function useDefaultComponents<R, SR>(): Maybe<Renderers<R, SR>> {\n  return useContext(DataGridDefaultComponentsContext);\n}\n","import { useFocusRef } from '../hooks/useFocusRef';\nimport { useDefaultComponents } from '../DataGridDefaultComponentsProvider';\nimport type { CheckboxFormatterProps } from '../types';\n\ntype SharedInputProps = Pick<CheckboxFormatterProps, 'disabled' | 'aria-label' | 'aria-labelledby'>;\n\ninterface SelectCellFormatterProps extends SharedInputProps {\n  isCellSelected: boolean;\n  value: boolean;\n  onChange: (value: boolean, isShiftClick: boolean) => void;\n}\n\nexport function SelectCellFormatter({\n  value,\n  isCellSelected,\n  disabled,\n  onChange,\n  'aria-label': ariaLabel,\n  'aria-labelledby': ariaLabelledBy\n}: SelectCellFormatterProps) {\n  const { ref, tabIndex } = useFocusRef<HTMLInputElement>(isCellSelected);\n  const checkboxFormatter = useDefaultComponents()!.checkboxFormatter!;\n\n  return (\n    <>\n      {checkboxFormatter(\n        {\n          'aria-label': ariaLabel,\n          'aria-labelledby': ariaLabelledBy,\n          tabIndex,\n          disabled,\n          checked: value,\n          onChange\n        },\n        ref\n      )}\n    </>\n  );\n}\n","import type { FormatterProps } from '../types';\n\nexport function valueFormatter<R, SR>(props: FormatterProps<R, SR>) {\n  try {\n    return <>{props.row[props.column.key as keyof R]}</>;\n  } catch {\n    return null;\n  }\n}\n","import { css } from '@linaria/core';\nimport type { GroupFormatterProps } from '../types';\nimport { useFocusRef } from '../hooks/useFocusRef';\n\nconst groupCellContent = css`\n  @layer rdg.GroupCellContent {\n    outline: none;\n  }\n`;\n\nconst groupCellContentClassname = `rdg-group-cell-content ${groupCellContent}`;\n\nconst caret = css`\n  @layer rdg.GroupCellCaret {\n    margin-inline-start: 4px;\n    stroke: currentColor;\n    stroke-width: 1.5px;\n    fill: transparent;\n    vertical-align: middle;\n\n    > path {\n      transition: d 0.1s;\n    }\n  }\n`;\n\nconst caretClassname = `rdg-caret ${caret}`;\n\nexport function toggleGroupFormatter<R, SR>(props: GroupFormatterProps<R, SR>) {\n  return <ToggleGroup {...props} />;\n}\n\nexport function ToggleGroup<R, SR>({\n  groupKey,\n  isExpanded,\n  isCellSelected,\n  toggleGroup\n}: GroupFormatterProps<R, SR>) {\n  const { ref, tabIndex } = useFocusRef<HTMLSpanElement>(isCellSelected);\n\n  function handleKeyDown({ key }: React.KeyboardEvent<HTMLSpanElement>) {\n    if (key === 'Enter') {\n      toggleGroup();\n    }\n  }\n\n  const d = isExpanded ? 'M1 1 L 7 7 L 13 1' : 'M1 7 L 7 1 L 13 7';\n\n  return (\n    <span\n      ref={ref}\n      className={groupCellContentClassname}\n      tabIndex={tabIndex}\n      onKeyDown={handleKeyDown}\n    >\n      {groupKey as string}\n      <svg viewBox=\"0 0 14 8\" width=\"14\" height=\"8\" className={caretClassname} aria-hidden>\n        <path d={d} />\n      </svg>\n    </span>\n  );\n}\n","import { createContext, useContext } from 'react';\nimport type { SelectRowEvent } from '../types';\n\nconst RowSelectionContext = createContext<boolean | undefined>(undefined);\n\nexport const RowSelectionProvider = RowSelectionContext.Provider;\n\nconst RowSelectionChangeContext = createContext<\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  ((selectRowEvent: SelectRowEvent<any>) => void) | undefined\n>(undefined);\n\nexport const RowSelectionChangeProvider = RowSelectionChangeContext.Provider;\n\nexport function useRowSelection<R>(): [boolean, (selectRowEvent: SelectRowEvent<R>) => void] {\n  const rowSelectionContext = useContext(RowSelectionContext);\n  const rowSelectionChangeContext = useContext(RowSelectionChangeContext);\n\n  if (rowSelectionContext === undefined || rowSelectionChangeContext === undefined) {\n    throw new Error('useRowSelection must be used within DataGrid cells');\n  }\n\n  return [rowSelectionContext, rowSelectionChangeContext];\n}\n","import { SelectCellFormatter } from './formatters';\nimport { useRowSelection } from './hooks/useRowSelection';\nimport type { Column, FormatterProps, GroupFormatterProps } from './types';\n\nexport const SELECT_COLUMN_KEY = 'select-row';\n\nfunction SelectFormatter(props: FormatterProps<unknown>) {\n  const [isRowSelected, onRowSelectionChange] = useRowSelection();\n\n  return (\n    <SelectCellFormatter\n      aria-label=\"Select\"\n      isCellSelected={props.isCellSelected}\n      value={isRowSelected}\n      onChange={(checked, isShiftClick) => {\n        onRowSelectionChange({ row: props.row, checked, isShiftClick });\n      }}\n    />\n  );\n}\n\nfunction SelectGroupFormatter(props: GroupFormatterProps<unknown>) {\n  const [isRowSelected, onRowSelectionChange] = useRowSelection();\n\n  return (\n    <SelectCellFormatter\n      aria-label=\"Select Group\"\n      isCellSelected={props.isCellSelected}\n      value={isRowSelected}\n      onChange={(checked) => {\n        onRowSelectionChange({ row: props.row, checked, isShiftClick: false });\n      }}\n    />\n  );\n}\n\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nexport const SelectColumn: Column<any, any> = {\n  key: SELECT_COLUMN_KEY,\n  name: '',\n  width: 35,\n  minWidth: 35,\n  maxWidth: 35,\n  resizable: false,\n  sortable: false,\n  frozen: true,\n  headerRenderer(props) {\n    return (\n      <SelectCellFormatter\n        aria-label=\"Select All\"\n        isCellSelected={props.isCellSelected}\n        value={props.allRowsSelected}\n        onChange={props.onAllRowsSelectionChange}\n      />\n    );\n  },\n  formatter(props) {\n    return <SelectFormatter {...props} />;\n  },\n  groupFormatter(props) {\n    return <SelectGroupFormatter {...props} />;\n  }\n};\n","import type { CalculatedColumn, ColSpanArgs } from '../types';\n\nexport function getColSpan<R, SR>(\n  column: CalculatedColumn<R, SR>,\n  lastFrozenColumnIndex: number,\n  args: ColSpanArgs<R, SR>\n): number | undefined {\n  const colSpan = typeof column.colSpan === 'function' ? column.colSpan(args) : 1;\n  if (\n    Number.isInteger(colSpan) &&\n    colSpan! > 1 &&\n    // ignore colSpan if it spans over both frozen and regular columns\n    (!column.frozen || column.idx + colSpan! - 1 <= lastFrozenColumnIndex)\n  ) {\n    return colSpan!;\n  }\n  return undefined;\n}\n","import type { Maybe } from '../types';\n\nexport function stopPropagation(event: React.SyntheticEvent) {\n  event.stopPropagation();\n}\n\nexport function scrollIntoView(element: Maybe<HTMLDivElement>) {\n  element?.scrollIntoView({ inline: 'nearest', block: 'nearest' });\n}\n","// https://developer.mozilla.org/en-US/docs/Web/API/KeyboardEvent/key/Key_Values\nconst nonInputKeys = new Set([\n  // Special keys\n  'Unidentified',\n  // Modifier keys\n  'Alt',\n  'AltGraph',\n  'CapsLock',\n  'Control',\n  'Fn',\n  'FnLock',\n  'Meta',\n  'NumLock',\n  'ScrollLock',\n  'Shift',\n  // Whitespace keys\n  'Tab',\n  // Navigation keys\n  'ArrowDown',\n  'ArrowLeft',\n  'ArrowRight',\n  'ArrowUp',\n  'End',\n  'Home',\n  'PageDown',\n  'PageUp',\n  // Editing\n  'Insert',\n  // UI keys\n  'ContextMenu',\n  'Escape',\n  'Pause',\n  'Play',\n  // Device keys\n  'PrintScreen',\n  // Function keys\n  'F1',\n  // 'F2', /!\\ specifically allowed, do not edit\n  'F3',\n  'F4',\n  'F5',\n  'F6',\n  'F7',\n  'F8',\n  'F9',\n  'F10',\n  'F11',\n  'F12'\n]);\n\nexport function isCtrlKeyHeldDown(e: React.KeyboardEvent): boolean {\n  return (e.ctrlKey || e.metaKey) && e.key !== 'Control';\n}\n\nexport function isDefaultCellInput(event: React.KeyboardEvent<HTMLDivElement>): boolean {\n  return !nonInputKeys.has(event.key);\n}\n\n/**\n * By default, the following navigation keys are enabled while an editor is open, under specific conditions:\n * - Tab:\n *   - The editor must be an <input>, a <textarea>, or a <select> element.\n *   - The editor element must be the only immediate child of the editor container/a label.\n */\nexport function onEditorNavigation({ key, target }: React.KeyboardEvent<HTMLDivElement>): boolean {\n  if (\n    key === 'Tab' &&\n    (target instanceof HTMLInputElement ||\n      target instanceof HTMLTextAreaElement ||\n      target instanceof HTMLSelectElement)\n  ) {\n    return target.matches(\n      '.rdg-editor-container > :only-child, .rdg-editor-container > label:only-child > :only-child, .rdg-editor-container > div:only-child > label:only-child > :only-child'\n    );\n  }\n  return false;\n}\n","import { css } from '@linaria/core';\nimport type { CalculatedColumn } from '../types';\n\nconst measuringCellClassname = css`\n  @layer rdg.MeasuringCell {\n    contain: strict;\n    grid-row: 1;\n    visibility: hidden;\n  }\n`;\n\nexport function renderMeasuringCells<R, SR>(viewportColumns: readonly CalculatedColumn<R, SR>[]) {\n  return (\n    <>\n      {viewportColumns.map(({ key, idx, minWidth, maxWidth }) => (\n        <div\n          key={key}\n          className={measuringCellClassname}\n          style={{ gridColumnStart: idx + 1, minWidth, maxWidth }}\n          data-measuring-cell-key={key}\n        />\n      ))}\n    </>\n  );\n}\n","import type { CalculatedColumn, Position, GroupRow, CellNavigationMode, Maybe } from '../types';\nimport { getColSpan } from './colSpanUtils';\n\ninterface IsSelectedCellEditableOpts<R, SR> {\n  selectedPosition: Position;\n  columns: readonly CalculatedColumn<R, SR>[];\n  rows: readonly (R | GroupRow<R>)[];\n  isGroupRow: (row: R | GroupRow<R>) => row is GroupRow<R>;\n}\n\nexport function isSelectedCellEditable<R, SR>({\n  selectedPosition,\n  columns,\n  rows,\n  isGroupRow\n}: IsSelectedCellEditableOpts<R, SR>): boolean {\n  const column = columns[selectedPosition.idx];\n  const row = rows[selectedPosition.rowIdx];\n  return !isGroupRow(row) && isCellEditable(column, row);\n}\n\nexport function isCellEditable<R, SR>(column: CalculatedColumn<R, SR>, row: R): boolean {\n  return (\n    column.editor != null &&\n    !column.rowGroup &&\n    (typeof column.editable === 'function' ? column.editable(row) : column.editable) !== false\n  );\n}\n\ninterface GetNextSelectedCellPositionOpts<R, SR> {\n  cellNavigationMode: CellNavigationMode;\n  columns: readonly CalculatedColumn<R, SR>[];\n  colSpanColumns: readonly CalculatedColumn<R, SR>[];\n  rows: readonly (R | GroupRow<R>)[];\n  topSummaryRows: Maybe<readonly SR[]>;\n  bottomSummaryRows: Maybe<readonly SR[]>;\n  minRowIdx: number;\n  maxRowIdx: number;\n  currentPosition: Position;\n  nextPosition: Position;\n  lastFrozenColumnIndex: number;\n  isCellWithinBounds: (position: Position) => boolean;\n  isGroupRow: (row: R | GroupRow<R>) => row is GroupRow<R>;\n}\n\nexport function getSelectedCellColSpan<R, SR>({\n  rows,\n  topSummaryRows,\n  bottomSummaryRows,\n  rowIdx,\n  lastFrozenColumnIndex,\n  column,\n  isGroupRow\n}: Pick<\n  GetNextSelectedCellPositionOpts<R, SR>,\n  'rows' | 'topSummaryRows' | 'bottomSummaryRows' | 'isGroupRow' | 'lastFrozenColumnIndex'\n> & {\n  rowIdx: number;\n  column: CalculatedColumn<R, SR>;\n}) {\n  const topSummaryRowsCount = topSummaryRows?.length ?? 0;\n  const minRowIdx = -1 - topSummaryRowsCount;\n  if (rowIdx === minRowIdx) {\n    return getColSpan(column, lastFrozenColumnIndex, { type: 'HEADER' });\n  }\n\n  if (topSummaryRows && rowIdx > minRowIdx && rowIdx <= topSummaryRowsCount + minRowIdx) {\n    return getColSpan(column, lastFrozenColumnIndex, {\n      type: 'SUMMARY',\n      row: topSummaryRows[rowIdx + topSummaryRowsCount]\n    });\n  }\n\n  if (rowIdx >= 0 && rowIdx < rows.length) {\n    const row = rows[rowIdx];\n    if (!isGroupRow(row)) {\n      return getColSpan(column, lastFrozenColumnIndex, { type: 'ROW', row });\n    }\n    return undefined;\n  }\n\n  if (bottomSummaryRows) {\n    return getColSpan(column, lastFrozenColumnIndex, {\n      type: 'SUMMARY',\n      row: bottomSummaryRows[rowIdx - rows.length]\n    });\n  }\n\n  return undefined;\n}\n\nexport function getNextSelectedCellPosition<R, SR>({\n  cellNavigationMode,\n  columns,\n  colSpanColumns,\n  rows,\n  topSummaryRows,\n  bottomSummaryRows,\n  minRowIdx,\n  maxRowIdx,\n  currentPosition: { idx: currentIdx },\n  nextPosition,\n  lastFrozenColumnIndex,\n  isCellWithinBounds,\n  isGroupRow\n}: GetNextSelectedCellPositionOpts<R, SR>): Position {\n  let { idx: nextIdx, rowIdx: nextRowIdx } = nextPosition;\n\n  const setColSpan = (moveRight: boolean) => {\n    if (nextRowIdx >= 0 && nextRowIdx < rows.length) {\n      const row = rows[nextRowIdx];\n      if (isGroupRow(row)) return;\n    }\n    // If a cell within the colspan range is selected then move to the\n    // previous or the next cell depending on the navigation direction\n    for (const column of colSpanColumns) {\n      const colIdx = column.idx;\n      if (colIdx > nextIdx) break;\n      const colSpan = getSelectedCellColSpan({\n        rows,\n        topSummaryRows,\n        bottomSummaryRows,\n        rowIdx: nextRowIdx,\n        lastFrozenColumnIndex,\n        column,\n        isGroupRow\n      });\n\n      if (colSpan && nextIdx > colIdx && nextIdx < colSpan + colIdx) {\n        nextIdx = colIdx + (moveRight ? colSpan : 0);\n        break;\n      }\n    }\n  };\n\n  if (isCellWithinBounds(nextPosition)) {\n    setColSpan(nextIdx - currentIdx > 0);\n  }\n\n  if (cellNavigationMode !== 'NONE') {\n    const columnsCount = columns.length;\n    const isAfterLastColumn = nextIdx === columnsCount;\n    const isBeforeFirstColumn = nextIdx === -1;\n\n    if (isAfterLastColumn) {\n      if (cellNavigationMode === 'CHANGE_ROW') {\n        const isLastRow = nextRowIdx === maxRowIdx;\n        if (!isLastRow) {\n          nextIdx = 0;\n          nextRowIdx += 1;\n        }\n      } else {\n        nextIdx = 0;\n      }\n    } else if (isBeforeFirstColumn) {\n      if (cellNavigationMode === 'CHANGE_ROW') {\n        const isFirstRow = nextRowIdx === minRowIdx;\n        if (!isFirstRow) {\n          nextRowIdx -= 1;\n          nextIdx = columnsCount - 1;\n        }\n      } else {\n        nextIdx = columnsCount - 1;\n      }\n      setColSpan(false);\n    }\n  }\n\n  return { idx: nextIdx, rowIdx: nextRowIdx };\n}\n\ninterface CanExitGridOpts {\n  cellNavigationMode: CellNavigationMode;\n  maxColIdx: number;\n  minRowIdx: number;\n  maxRowIdx: number;\n  selectedPosition: Position;\n  shiftKey: boolean;\n}\n\nexport function canExitGrid({\n  cellNavigationMode,\n  maxColIdx,\n  minRowIdx,\n  maxRowIdx,\n  selectedPosition: { rowIdx, idx },\n  shiftKey\n}: CanExitGridOpts): boolean {\n  // When the cellNavigationMode is 'none' or 'changeRow', you can exit the grid if you're at the first or last cell of the grid\n  // When the cellNavigationMode is 'loopOverRow', there is no logical exit point so you can't exit the grid\n  if (cellNavigationMode === 'NONE' || cellNavigationMode === 'CHANGE_ROW') {\n    const atLastCellInRow = idx === maxColIdx;\n    const atFirstCellInRow = idx === 0;\n    const atLastRow = rowIdx === maxRowIdx;\n    const atFirstRow = rowIdx === minRowIdx;\n\n    return shiftKey ? atFirstCellInRow && atFirstRow : atLastCellInRow && atLastRow;\n  }\n\n  return false;\n}\n","import type { CSSProperties } from 'react';\nimport clsx from 'clsx';\n\nimport type { CalculatedColumn } from '../types';\nimport { cellClassname, cellFrozenClassname, cellFrozenLastClassname } from '../style';\n\nexport function getRowStyle(rowIdx: number, height?: number): CSSProperties {\n  if (height !== undefined) {\n    return {\n      '--rdg-grid-row-start': rowIdx,\n      '--rdg-row-height': `${height}px`\n    } as unknown as CSSProperties;\n  }\n  return { '--rdg-grid-row-start': rowIdx } as unknown as CSSProperties;\n}\n\nexport function getCellStyle<R, SR>(\n  column: CalculatedColumn<R, SR>,\n  colSpan?: number\n): React.CSSProperties {\n  return {\n    gridColumnStart: column.idx + 1,\n    gridColumnEnd: colSpan !== undefined ? `span ${colSpan}` : undefined,\n    insetInlineStart: column.frozen ? `var(--rdg-frozen-left-${column.idx})` : undefined\n  };\n}\n\nexport function getCellClassname<R, SR>(\n  column: CalculatedColumn<R, SR>,\n  ...extraClasses: Parameters<typeof clsx>\n): string {\n  return clsx(\n    cellClassname,\n    {\n      [cellFrozenClassname]: column.frozen,\n      [cellFrozenLastClassname]: column.isLastFrozenColumn\n    },\n    ...extraClasses\n  );\n}\n","import type { CalculatedColumn } from '../types';\n\nexport * from './colSpanUtils';\nexport * from './domUtils';\nexport * from './keyboardUtils';\nexport * from './renderMeasuringCells';\nexport * from './selectedCellUtils';\nexport * from './styleUtils';\n\nexport const { min, max, round, floor, sign, abs } = Math;\n\nexport function assertIsValidKeyGetter<R, K extends React.Key>(\n  keyGetter: unknown\n): asserts keyGetter is (row: R) => K {\n  if (typeof keyGetter !== 'function') {\n    throw new Error('Please specify the rowKeyGetter prop to use selection');\n  }\n}\n\nexport function clampColumnWidth<R, SR>(\n  width: number,\n  { minWidth, maxWidth }: CalculatedColumn<R, SR>\n): number {\n  width = max(width, minWidth);\n\n  // ignore maxWidth if it less than minWidth\n  if (typeof maxWidth === 'number' && maxWidth >= minWidth) {\n    return min(width, maxWidth);\n  }\n\n  return width;\n}\n","import { useMemo } from 'react';\n\nimport type { CalculatedColumn, Column, Maybe } from '../types';\nimport type { DataGridProps } from '../DataGrid';\nimport { valueFormatter, toggleGroupFormatter } from '../formatters';\nimport { SELECT_COLUMN_KEY } from '../Columns';\nimport { clampColumnWidth, max, min } from '../utils';\n\ntype Mutable<T> = {\n  -readonly [P in keyof T]: T[P];\n};\n\ninterface ColumnMetric {\n  width: number;\n  left: number;\n}\n\nconst DEFAULT_COLUMN_WIDTH = 'auto';\nconst DEFAULT_COLUMN_MIN_WIDTH = 80;\n\ninterface CalculatedColumnsArgs<R, SR> extends Pick<DataGridProps<R, SR>, 'defaultColumnOptions'> {\n  rawColumns: readonly Column<R, SR>[];\n  rawGroupBy: Maybe<readonly string[]>;\n  viewportWidth: number;\n  scrollLeft: number;\n  columnWidths: ReadonlyMap<string, number>;\n  enableVirtualization: boolean;\n}\n\nexport function useCalculatedColumns<R, SR>({\n  rawColumns,\n  columnWidths,\n  viewportWidth,\n  scrollLeft,\n  defaultColumnOptions,\n  rawGroupBy,\n  enableVirtualization\n}: CalculatedColumnsArgs<R, SR>) {\n  const defaultWidth = defaultColumnOptions?.width ?? DEFAULT_COLUMN_WIDTH;\n  const defaultMinWidth = defaultColumnOptions?.minWidth ?? DEFAULT_COLUMN_MIN_WIDTH;\n  const defaultMaxWidth = defaultColumnOptions?.maxWidth ?? undefined;\n  const defaultFormatter = defaultColumnOptions?.formatter ?? valueFormatter;\n  const defaultSortable = defaultColumnOptions?.sortable ?? false;\n  const defaultResizable = defaultColumnOptions?.resizable ?? false;\n\n  const { columns, colSpanColumns, lastFrozenColumnIndex, groupBy } = useMemo((): {\n    columns: readonly CalculatedColumn<R, SR>[];\n    colSpanColumns: readonly CalculatedColumn<R, SR>[];\n    lastFrozenColumnIndex: number;\n    groupBy: readonly string[];\n  } => {\n    // Filter rawGroupBy and ignore keys that do not match the columns prop\n    const groupBy: string[] = [];\n    let lastFrozenColumnIndex = -1;\n\n    const columns = rawColumns.map((rawColumn) => {\n      const rowGroup = rawGroupBy?.includes(rawColumn.key) ?? false;\n      // eslint-disable-next-line @typescript-eslint/prefer-nullish-coalescing\n      const frozen = rowGroup || rawColumn.frozen || false;\n\n      const column: Mutable<CalculatedColumn<R, SR>> = {\n        ...rawColumn,\n        idx: 0,\n        frozen,\n        isLastFrozenColumn: false,\n        rowGroup,\n        width: rawColumn.width ?? defaultWidth,\n        minWidth: rawColumn.minWidth ?? defaultMinWidth,\n        maxWidth: rawColumn.maxWidth ?? defaultMaxWidth,\n        sortable: rawColumn.sortable ?? defaultSortable,\n        resizable: rawColumn.resizable ?? defaultResizable,\n        formatter: rawColumn.formatter ?? defaultFormatter\n      };\n\n      if (rowGroup) {\n        column.groupFormatter ??= toggleGroupFormatter;\n      }\n\n      if (frozen) {\n        lastFrozenColumnIndex++;\n      }\n\n      return column;\n    });\n\n    columns.sort(({ key: aKey, frozen: frozenA }, { key: bKey, frozen: frozenB }) => {\n      // Sort select column first:\n      if (aKey === SELECT_COLUMN_KEY) return -1;\n      if (bKey === SELECT_COLUMN_KEY) return 1;\n\n      // Sort grouped columns second, following the groupBy order:\n      if (rawGroupBy?.includes(aKey)) {\n        if (rawGroupBy.includes(bKey)) {\n          return rawGroupBy.indexOf(aKey) - rawGroupBy.indexOf(bKey);\n        }\n        return -1;\n      }\n      if (rawGroupBy?.includes(bKey)) return 1;\n\n      // Sort frozen columns third:\n      if (frozenA) {\n        if (frozenB) return 0;\n        return -1;\n      }\n      if (frozenB) return 1;\n\n      // Sort other columns last:\n      return 0;\n    });\n\n    const colSpanColumns: CalculatedColumn<R, SR>[] = [];\n    columns.forEach((column, idx) => {\n      column.idx = idx;\n\n      if (column.rowGroup) {\n        groupBy.push(column.key);\n      }\n\n      if (column.colSpan != null) {\n        colSpanColumns.push(column);\n      }\n    });\n\n    if (lastFrozenColumnIndex !== -1) {\n      columns[lastFrozenColumnIndex].isLastFrozenColumn = true;\n    }\n\n    return {\n      columns,\n      colSpanColumns,\n      lastFrozenColumnIndex,\n      groupBy\n    };\n  }, [\n    rawColumns,\n    defaultWidth,\n    defaultMinWidth,\n    defaultMaxWidth,\n    defaultFormatter,\n    defaultResizable,\n    defaultSortable,\n    rawGroupBy\n  ]);\n\n  const { templateColumns, layoutCssVars, totalFrozenColumnWidth, columnMetrics } = useMemo((): {\n    templateColumns: readonly string[];\n    layoutCssVars: Readonly<Record<string, string>>;\n    totalFrozenColumnWidth: number;\n    columnMetrics: ReadonlyMap<CalculatedColumn<R, SR>, ColumnMetric>;\n  } => {\n    const columnMetrics = new Map<CalculatedColumn<R, SR>, ColumnMetric>();\n    let left = 0;\n    let totalFrozenColumnWidth = 0;\n    const templateColumns: string[] = [];\n\n    for (const column of columns) {\n      let width = columnWidths.get(column.key) ?? column.width;\n      if (typeof width === 'number') {\n        width = clampColumnWidth(width, column);\n      } else {\n        // This is a placeholder width so we can continue to use virtualization.\n        // The actual value is set after the column is rendered\n        width = column.minWidth;\n      }\n      templateColumns.push(`${width}px`);\n      columnMetrics.set(column, { width, left });\n      left += width;\n    }\n\n    if (lastFrozenColumnIndex !== -1) {\n      const columnMetric = columnMetrics.get(columns[lastFrozenColumnIndex])!;\n      totalFrozenColumnWidth = columnMetric.left + columnMetric.width;\n    }\n\n    const layoutCssVars: Record<string, string> = {\n      gridTemplateColumns: templateColumns.join(' ')\n    };\n\n    for (let i = 0; i <= lastFrozenColumnIndex; i++) {\n      const column = columns[i];\n      layoutCssVars[`--rdg-frozen-left-${column.idx}`] = `${columnMetrics.get(column)!.left}px`;\n    }\n\n    return { templateColumns, layoutCssVars, totalFrozenColumnWidth, columnMetrics };\n  }, [columnWidths, columns, lastFrozenColumnIndex]);\n\n  const [colOverscanStartIdx, colOverscanEndIdx] = useMemo((): [number, number] => {\n    if (!enableVirtualization) {\n      return [0, columns.length - 1];\n    }\n    // get the viewport's left side and right side positions for non-frozen columns\n    const viewportLeft = scrollLeft + totalFrozenColumnWidth;\n    const viewportRight = scrollLeft + viewportWidth;\n    // get first and last non-frozen column indexes\n    const lastColIdx = columns.length - 1;\n    const firstUnfrozenColumnIdx = min(lastFrozenColumnIndex + 1, lastColIdx);\n\n    // skip rendering non-frozen columns if the frozen columns cover the entire viewport\n    if (viewportLeft >= viewportRight) {\n      return [firstUnfrozenColumnIdx, firstUnfrozenColumnIdx];\n    }\n\n    // get the first visible non-frozen column index\n    let colVisibleStartIdx = firstUnfrozenColumnIdx;\n    while (colVisibleStartIdx < lastColIdx) {\n      const { left, width } = columnMetrics.get(columns[colVisibleStartIdx])!;\n      // if the right side of the columnn is beyond the left side of the available viewport,\n      // then it is the first column that's at least partially visible\n      if (left + width > viewportLeft) {\n        break;\n      }\n      colVisibleStartIdx++;\n    }\n\n    // get the last visible non-frozen column index\n    let colVisibleEndIdx = colVisibleStartIdx;\n    while (colVisibleEndIdx < lastColIdx) {\n      const { left, width } = columnMetrics.get(columns[colVisibleEndIdx])!;\n      // if the right side of the column is beyond or equal to the right side of the available viewport,\n      // then it the last column that's at least partially visible, as the previous column's right side is not beyond the viewport.\n      if (left + width >= viewportRight) {\n        break;\n      }\n      colVisibleEndIdx++;\n    }\n\n    const colOverscanStartIdx = max(firstUnfrozenColumnIdx, colVisibleStartIdx - 1);\n    const colOverscanEndIdx = min(lastColIdx, colVisibleEndIdx + 1);\n\n    return [colOverscanStartIdx, colOverscanEndIdx];\n  }, [\n    columnMetrics,\n    columns,\n    lastFrozenColumnIndex,\n    scrollLeft,\n    totalFrozenColumnWidth,\n    viewportWidth,\n    enableVirtualization\n  ]);\n\n  return {\n    columns,\n    colSpanColumns,\n    colOverscanStartIdx,\n    colOverscanEndIdx,\n    templateColumns,\n    layoutCssVars,\n    columnMetrics,\n    lastFrozenColumnIndex,\n    totalFrozenColumnWidth,\n    groupBy\n  };\n}\n","import { useRef, useState } from 'react';\nimport { useLayoutEffect } from './useLayoutEffect';\n\nexport function useGridDimensions(): [\n  ref: React.RefObject<HTMLDivElement>,\n  width: number,\n  height: number,\n  isWidthInitialized: boolean\n] {\n  const gridRef = useRef<HTMLDivElement>(null);\n  const [inlineSize, setInlineSize] = useState(1);\n  const [blockSize, setBlockSize] = useState(1);\n  const [isWidthInitialized, setWidthInitialized] = useState(false);\n\n  useLayoutEffect(() => {\n    const { ResizeObserver } = window;\n\n    // don't break in Node.js (SSR), jest/jsdom, and browsers that don't support ResizeObserver\n    // eslint-disable-next-line @typescript-eslint/no-unnecessary-condition\n    if (ResizeObserver == null) return;\n\n    const { clientWidth, clientHeight, offsetWidth, offsetHeight } = gridRef.current!;\n    const { width, height } = gridRef.current!.getBoundingClientRect();\n    const initialWidth = width - offsetWidth + clientWidth;\n    const initialHeight = height - offsetHeight + clientHeight;\n\n    setInlineSize(initialWidth);\n    setBlockSize(initialHeight);\n    setWidthInitialized(true);\n\n    const resizeObserver = new ResizeObserver((entries) => {\n      const size = entries[0].contentBoxSize[0];\n      setInlineSize(size.inlineSize);\n      setBlockSize(size.blockSize);\n    });\n    resizeObserver.observe(gridRef.current!);\n\n    return () => {\n      resizeObserver.disconnect();\n    };\n  }, []);\n\n  return [gridRef, inlineSize, blockSize, isWidthInitialized];\n}\n","import { useRef, useEffect, useCallback } from 'react';\nimport type { Maybe } from '../types';\n\n// https://reactjs.org/docs/hooks-faq.html#what-can-i-do-if-my-effect-dependencies-change-too-often\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nexport function useLatestFunc<T extends Maybe<(...args: any[]) => any>>(fn: T): T {\n  const ref = useRef(fn);\n\n  useEffect(() => {\n    ref.current = fn;\n  });\n\n  const callbackFn = useCallback((...args: Parameters<NonNullable<T>>) => {\n    ref.current!(...args);\n  }, []);\n\n  // @ts-expect-error\n  return fn ? callbackFn : fn;\n}\n","import { useCallback, useState } from 'react';\nimport { scrollIntoView } from '../utils';\n\n// https://www.w3.org/TR/wai-aria-practices-1.1/#kbd_roving_tabindex\nexport function useRovingCellRef(isSelected: boolean) {\n  // https://www.w3.org/TR/wai-aria-practices-1.1/#gridNav_focus\n  const [isChildFocused, setIsChildFocused] = useState(false);\n\n  if (isChildFocused && !isSelected) {\n    setIsChildFocused(false);\n  }\n\n  const ref = useCallback((cell: HTMLDivElement | null) => {\n    if (cell === null) return;\n    scrollIntoView(cell);\n    if (cell.contains(document.activeElement)) return;\n    cell.focus({ preventScroll: true });\n  }, []);\n\n  function onFocus(event: React.FocusEvent<HTMLDivElement>) {\n    if (event.target !== event.currentTarget) {\n      setIsChildFocused(true);\n    }\n  }\n\n  const isFocused = isSelected && !isChildFocused;\n\n  return {\n    ref: isSelected ? ref : undefined,\n    tabIndex: isFocused ? 0 : -1,\n    onFocus: isSelected ? onFocus : undefined\n  };\n}\n","import { useMemo } from 'react';\n\nimport { getColSpan } from '../utils';\nimport type { CalculatedColumn, GroupRow, Maybe } from '../types';\n\ninterface ViewportColumnsArgs<R, SR> {\n  columns: readonly CalculatedColumn<R, SR>[];\n  colSpanColumns: readonly CalculatedColumn<R, SR>[];\n  rows: readonly (R | GroupRow<R>)[];\n  topSummaryRows: Maybe<readonly SR[]>;\n  bottomSummaryRows: Maybe<readonly SR[]>;\n  colOverscanStartIdx: number;\n  colOverscanEndIdx: number;\n  lastFrozenColumnIndex: number;\n  rowOverscanStartIdx: number;\n  rowOverscanEndIdx: number;\n  columnWidths: ReadonlyMap<string, number>;\n  isGroupRow: (row: R | GroupRow<R>) => row is GroupRow<R>;\n}\n\nexport function useViewportColumns<R, SR>({\n  columns,\n  colSpanColumns,\n  rows,\n  topSummaryRows,\n  bottomSummaryRows,\n  colOverscanStartIdx,\n  colOverscanEndIdx,\n  lastFrozenColumnIndex,\n  rowOverscanStartIdx,\n  rowOverscanEndIdx,\n  columnWidths,\n  isGroupRow\n}: ViewportColumnsArgs<R, SR>) {\n  // find the column that spans over a column within the visible columns range and adjust colOverscanStartIdx\n  const startIdx = useMemo(() => {\n    if (colOverscanStartIdx === 0) return 0;\n\n    let startIdx = colOverscanStartIdx;\n\n    const updateStartIdx = (colIdx: number, colSpan: number | undefined) => {\n      if (colSpan !== undefined && colIdx + colSpan > colOverscanStartIdx) {\n        startIdx = colIdx;\n        return true;\n      }\n      return false;\n    };\n\n    for (const column of colSpanColumns) {\n      // check header row\n      const colIdx = column.idx;\n      if (colIdx >= startIdx) break;\n      if (updateStartIdx(colIdx, getColSpan(column, lastFrozenColumnIndex, { type: 'HEADER' }))) {\n        break;\n      }\n\n      // check viewport rows\n      for (let rowIdx = rowOverscanStartIdx; rowIdx <= rowOverscanEndIdx; rowIdx++) {\n        const row = rows[rowIdx];\n        if (isGroupRow(row)) continue;\n        if (\n          updateStartIdx(colIdx, getColSpan(column, lastFrozenColumnIndex, { type: 'ROW', row }))\n        ) {\n          break;\n        }\n      }\n\n      // check summary rows\n      if (topSummaryRows != null) {\n        for (const row of topSummaryRows) {\n          if (\n            updateStartIdx(\n              colIdx,\n              getColSpan(column, lastFrozenColumnIndex, { type: 'SUMMARY', row })\n            )\n          ) {\n            break;\n          }\n        }\n      }\n\n      if (bottomSummaryRows != null) {\n        for (const row of bottomSummaryRows) {\n          if (\n            updateStartIdx(\n              colIdx,\n              getColSpan(column, lastFrozenColumnIndex, { type: 'SUMMARY', row })\n            )\n          ) {\n            break;\n          }\n        }\n      }\n    }\n\n    return startIdx;\n  }, [\n    rowOverscanStartIdx,\n    rowOverscanEndIdx,\n    rows,\n    topSummaryRows,\n    bottomSummaryRows,\n    colOverscanStartIdx,\n    lastFrozenColumnIndex,\n    colSpanColumns,\n    isGroupRow\n  ]);\n\n  const { viewportColumns, flexWidthViewportColumns } = useMemo((): {\n    viewportColumns: readonly CalculatedColumn<R, SR>[];\n    flexWidthViewportColumns: readonly CalculatedColumn<R, SR>[];\n  } => {\n    const viewportColumns: CalculatedColumn<R, SR>[] = [];\n    const flexWidthViewportColumns: CalculatedColumn<R, SR>[] = [];\n    for (let colIdx = 0; colIdx <= colOverscanEndIdx; colIdx++) {\n      const column = columns[colIdx];\n\n      if (colIdx < startIdx && !column.frozen) continue;\n      viewportColumns.push(column);\n      if (typeof column.width === 'string') {\n        flexWidthViewportColumns.push(column);\n      }\n    }\n\n    return { viewportColumns, flexWidthViewportColumns };\n  }, [startIdx, colOverscanEndIdx, columns]);\n\n  const unsizedFlexWidthViewportColumns = useMemo((): readonly CalculatedColumn<R, SR>[] => {\n    return flexWidthViewportColumns.filter((column) => !columnWidths.has(column.key));\n  }, [flexWidthViewportColumns, columnWidths]);\n\n  return {\n    viewportColumns,\n    flexWidthViewportColumns: unsizedFlexWidthViewportColumns\n  };\n}\n","import { useMemo } from 'react';\nimport { floor, max, min } from '../utils';\nimport type { GroupRow, Maybe, RowHeightArgs } from '../types';\n\ntype GroupByDictionary<TRow> = Record<\n  string,\n  {\n    readonly childRows: readonly TRow[];\n    readonly childGroups: readonly TRow[] | Readonly<GroupByDictionary<TRow>>;\n    readonly startRowIndex: number;\n  }\n>;\n\ninterface ViewportRowsArgs<R> {\n  rawRows: readonly R[];\n  rowHeight: number | ((args: RowHeightArgs<R>) => number);\n  clientHeight: number;\n  scrollTop: number;\n  groupBy: readonly string[];\n  rowGrouper: Maybe<(rows: readonly R[], columnKey: string) => Record<string, readonly R[]>>;\n  expandedGroupIds: Maybe<ReadonlySet<unknown>>;\n  enableVirtualization: boolean;\n}\n\n// TODO: https://github.com/microsoft/TypeScript/issues/41808\nfunction isReadonlyArray(arr: unknown): arr is readonly unknown[] {\n  return Array.isArray(arr);\n}\n\nexport function useViewportRows<R>({\n  rawRows,\n  rowHeight,\n  clientHeight,\n  scrollTop,\n  groupBy,\n  rowGrouper,\n  expandedGroupIds,\n  enableVirtualization\n}: ViewportRowsArgs<R>) {\n  const [groupedRows, rowsCount] = useMemo(() => {\n    if (groupBy.length === 0 || rowGrouper == null) return [undefined, rawRows.length];\n\n    const groupRows = (\n      rows: readonly R[],\n      [groupByKey, ...remainingGroupByKeys]: readonly string[],\n      startRowIndex: number\n    ): [Readonly<GroupByDictionary<R>>, number] => {\n      let groupRowsCount = 0;\n      const groups: GroupByDictionary<R> = {};\n      for (const [key, childRows] of Object.entries(rowGrouper(rows, groupByKey))) {\n        // Recursively group each parent group\n        const [childGroups, childRowsCount] =\n          remainingGroupByKeys.length === 0\n            ? [childRows, childRows.length]\n            : groupRows(childRows, remainingGroupByKeys, startRowIndex + groupRowsCount + 1); // 1 for parent row\n        groups[key] = { childRows, childGroups, startRowIndex: startRowIndex + groupRowsCount };\n        groupRowsCount += childRowsCount + 1; // 1 for parent row\n      }\n\n      return [groups, groupRowsCount];\n    };\n\n    return groupRows(rawRows, groupBy, 0);\n  }, [groupBy, rowGrouper, rawRows]);\n\n  const [rows, isGroupRow] = useMemo((): [\n    ReadonlyArray<R | GroupRow<R>>,\n    (row: R | GroupRow<R>) => row is GroupRow<R>\n  ] => {\n    const allGroupRows = new Set<unknown>();\n    if (!groupedRows) return [rawRows, isGroupRow];\n\n    const flattenedRows: Array<R | GroupRow<R>> = [];\n    const expandGroup = (\n      rows: GroupByDictionary<R> | readonly R[],\n      parentId: string | undefined,\n      level: number\n    ): void => {\n      if (isReadonlyArray(rows)) {\n        flattenedRows.push(...rows);\n        return;\n      }\n      Object.keys(rows).forEach((groupKey, posInSet, keys) => {\n        // TODO: should users have control over the generated key?\n        const id = parentId !== undefined ? `${parentId}__${groupKey}` : groupKey;\n        const isExpanded = expandedGroupIds?.has(id) ?? false;\n        const { childRows, childGroups, startRowIndex } = rows[groupKey];\n\n        const groupRow: GroupRow<R> = {\n          id,\n          parentId,\n          groupKey,\n          isExpanded,\n          childRows,\n          level,\n          posInSet,\n          startRowIndex,\n          setSize: keys.length\n        };\n        flattenedRows.push(groupRow);\n        allGroupRows.add(groupRow);\n\n        if (isExpanded) {\n          expandGroup(childGroups, id, level + 1);\n        }\n      });\n    };\n\n    expandGroup(groupedRows, undefined, 0);\n    return [flattenedRows, isGroupRow];\n\n    function isGroupRow(row: R | GroupRow<R>): row is GroupRow<R> {\n      return allGroupRows.has(row);\n    }\n  }, [expandedGroupIds, groupedRows, rawRows]);\n\n  const { totalRowHeight, gridTemplateRows, getRowTop, getRowHeight, findRowIdx } = useMemo(() => {\n    if (typeof rowHeight === 'number') {\n      return {\n        totalRowHeight: rowHeight * rows.length,\n        gridTemplateRows: ` repeat(${rows.length}, ${rowHeight}px)`,\n        getRowTop: (rowIdx: number) => rowIdx * rowHeight,\n        getRowHeight: () => rowHeight,\n        findRowIdx: (offset: number) => floor(offset / rowHeight)\n      };\n    }\n\n    let totalRowHeight = 0;\n    let gridTemplateRows = ' ';\n    // Calcule the height of all the rows upfront. This can cause performance issues\n    // and we can consider using a similar approach as react-window\n    // https://github.com/bvaughn/react-window/blob/b0a470cc264e9100afcaa1b78ed59d88f7914ad4/src/VariableSizeList.js#L68\n    const rowPositions = rows.map((row: R | GroupRow<R>) => {\n      const currentRowHeight = isGroupRow(row)\n        ? rowHeight({ type: 'GROUP', row })\n        : rowHeight({ type: 'ROW', row });\n      const position = { top: totalRowHeight, height: currentRowHeight };\n      gridTemplateRows += `${currentRowHeight}px `;\n      totalRowHeight += currentRowHeight;\n      return position;\n    });\n\n    const validateRowIdx = (rowIdx: number) => {\n      return max(0, min(rows.length - 1, rowIdx));\n    };\n\n    return {\n      totalRowHeight,\n      gridTemplateRows,\n      getRowTop: (rowIdx: number) => rowPositions[validateRowIdx(rowIdx)].top,\n      getRowHeight: (rowIdx: number) => rowPositions[validateRowIdx(rowIdx)].height,\n      findRowIdx(offset: number) {\n        let start = 0;\n        let end = rowPositions.length - 1;\n        while (start <= end) {\n          const middle = start + floor((end - start) / 2);\n          const currentOffset = rowPositions[middle].top;\n\n          if (currentOffset === offset) return middle;\n\n          if (currentOffset < offset) {\n            start = middle + 1;\n          } else if (currentOffset > offset) {\n            end = middle - 1;\n          }\n\n          if (start > end) return end;\n        }\n        return 0;\n      }\n    };\n  }, [isGroupRow, rowHeight, rows]);\n\n  let rowOverscanStartIdx = 0;\n  let rowOverscanEndIdx = rows.length - 1;\n\n  if (enableVirtualization) {\n    const overscanThreshold = 4;\n    const rowVisibleStartIdx = findRowIdx(scrollTop);\n    const rowVisibleEndIdx = findRowIdx(scrollTop + clientHeight);\n    rowOverscanStartIdx = max(0, rowVisibleStartIdx - overscanThreshold);\n    rowOverscanEndIdx = min(rows.length - 1, rowVisibleEndIdx + overscanThreshold);\n  }\n\n  return {\n    rowOverscanStartIdx,\n    rowOverscanEndIdx,\n    rows,\n    rowsCount,\n    totalRowHeight,\n    gridTemplateRows,\n    isGroupRow,\n    getRowTop,\n    getRowHeight,\n    findRowIdx\n  };\n}\n","import { css } from '@linaria/core';\n\nimport { useFocusRef } from './hooks';\nimport type { HeaderRendererProps } from './types';\nimport { useDefaultComponents } from './DataGridDefaultComponentsProvider';\n\nconst headerSortCell = css`\n  @layer rdg.SortableHeaderCell {\n    cursor: pointer;\n    display: flex;\n\n    &:focus {\n      outline: none;\n    }\n  }\n`;\n\nconst headerSortCellClassname = `rdg-header-sort-cell ${headerSortCell}`;\n\nconst headerSortName = css`\n  @layer rdg.SortableHeaderCellName {\n    flex-grow: 1;\n    overflow: hidden;\n    overflow: clip;\n    text-overflow: ellipsis;\n  }\n`;\n\nconst headerSortNameClassname = `rdg-header-sort-name ${headerSortName}`;\n\nexport default function headerRenderer<R, SR>({\n  column,\n  sortDirection,\n  priority,\n  onSort,\n  isCellSelected\n}: HeaderRendererProps<R, SR>) {\n  if (!column.sortable) return <>{column.name}</>;\n\n  return (\n    <SortableHeaderCell\n      onSort={onSort}\n      sortDirection={sortDirection}\n      priority={priority}\n      isCellSelected={isCellSelected}\n    >\n      {column.name}\n    </SortableHeaderCell>\n  );\n}\n\ntype SharedHeaderCellProps<R, SR> = Pick<\n  HeaderRendererProps<R, SR>,\n  'sortDirection' | 'onSort' | 'priority' | 'isCellSelected'\n>;\n\ninterface SortableHeaderCellProps<R, SR> extends SharedHeaderCellProps<R, SR> {\n  children: React.ReactNode;\n}\n\nfunction SortableHeaderCell<R, SR>({\n  onSort,\n  sortDirection,\n  priority,\n  children,\n  isCellSelected\n}: SortableHeaderCellProps<R, SR>) {\n  const sortStatus = useDefaultComponents<R, SR>()!.sortStatus!;\n  const { ref, tabIndex } = useFocusRef<HTMLSpanElement>(isCellSelected);\n\n  function handleKeyDown(event: React.KeyboardEvent<HTMLSpanElement>) {\n    if (event.key === ' ' || event.key === 'Enter') {\n      // stop propagation to prevent scrolling\n      event.preventDefault();\n      onSort(event.ctrlKey || event.metaKey);\n    }\n  }\n\n  function handleClick(event: React.MouseEvent<HTMLSpanElement>) {\n    onSort(event.ctrlKey || event.metaKey);\n  }\n\n  return (\n    <span\n      ref={ref}\n      tabIndex={tabIndex}\n      className={headerSortCellClassname}\n      onClick={handleClick}\n      onKeyDown={handleKeyDown}\n    >\n      <span className={headerSortNameClassname}>{children}</span>\n      <span>{sortStatus({ sortDirection, priority })}</span>\n    </span>\n  );\n}\n","import { css } from '@linaria/core';\n\nimport type { CalculatedColumn, SortColumn } from './types';\nimport type { HeaderRowProps } from './HeaderRow';\nimport defaultHeaderRenderer from './headerRenderer';\nimport { getCellStyle, getCellClassname } from './utils';\nimport { useRovingCellRef } from './hooks';\n\nconst cellResizable = css`\n  @layer rdg.HeaderCell {\n    touch-action: none;\n\n    &::after {\n      content: '';\n      cursor: col-resize;\n      position: absolute;\n      inset-block-start: 0;\n      inset-inline-end: 0;\n      inset-block-end: 0;\n      inline-size: 10px;\n    }\n  }\n`;\n\nconst cellResizableClassname = `rdg-cell-resizable ${cellResizable}`;\n\ntype SharedHeaderRowProps<R, SR> = Pick<\n  HeaderRowProps<R, SR, React.Key>,\n  | 'sortColumns'\n  | 'onSortColumnsChange'\n  | 'allRowsSelected'\n  | 'onAllRowsSelectionChange'\n  | 'selectCell'\n  | 'onColumnResize'\n  | 'shouldFocusGrid'\n  | 'direction'\n>;\n\nexport interface HeaderCellProps<R, SR> extends SharedHeaderRowProps<R, SR> {\n  column: CalculatedColumn<R, SR>;\n  colSpan: number | undefined;\n  isCellSelected: boolean;\n}\n\nexport default function HeaderCell<R, SR>({\n  column,\n  colSpan,\n  isCellSelected,\n  onColumnResize,\n  allRowsSelected,\n  onAllRowsSelectionChange,\n  sortColumns,\n  onSortColumnsChange,\n  selectCell,\n  shouldFocusGrid,\n  direction\n}: HeaderCellProps<R, SR>) {\n  const isRtl = direction === 'rtl';\n  const { ref, tabIndex, onFocus } = useRovingCellRef(isCellSelected);\n  const sortIndex = sortColumns?.findIndex((sort) => sort.columnKey === column.key);\n  const sortColumn =\n    sortIndex !== undefined && sortIndex > -1 ? sortColumns![sortIndex] : undefined;\n  const sortDirection = sortColumn?.direction;\n  const priority = sortColumn !== undefined && sortColumns!.length > 1 ? sortIndex! + 1 : undefined;\n  const ariaSort =\n    sortDirection && !priority ? (sortDirection === 'ASC' ? 'ascending' : 'descending') : undefined;\n\n  const className = getCellClassname(column, column.headerCellClass, {\n    [cellResizableClassname]: column.resizable\n  });\n\n  const headerRenderer = column.headerRenderer ?? defaultHeaderRenderer;\n\n  function onPointerDown(event: React.PointerEvent<HTMLDivElement>) {\n    if (event.pointerType === 'mouse' && event.buttons !== 1) {\n      return;\n    }\n\n    const { currentTarget, pointerId } = event;\n    const { right, left } = currentTarget.getBoundingClientRect();\n    const offset = isRtl ? event.clientX - left : right - event.clientX;\n\n    if (offset > 11) {\n      // +1px to account for the border size\n      return;\n    }\n\n    function onPointerMove(event: PointerEvent) {\n      // prevents text selection in Chrome, which fixes scrolling the grid while dragging, and fixes re-size on an autosized column\n      event.preventDefault();\n      const { right, left } = currentTarget.getBoundingClientRect();\n      const width = isRtl ? right + offset - event.clientX : event.clientX + offset - left;\n      if (width > 0) {\n        onColumnResize(column, width);\n      }\n    }\n\n    function onLostPointerCapture() {\n      currentTarget.removeEventListener('pointermove', onPointerMove);\n      currentTarget.removeEventListener('lostpointercapture', onLostPointerCapture);\n    }\n\n    currentTarget.setPointerCapture(pointerId);\n    currentTarget.addEventListener('pointermove', onPointerMove);\n    currentTarget.addEventListener('lostpointercapture', onLostPointerCapture);\n  }\n\n  function onSort(ctrlClick: boolean) {\n    if (onSortColumnsChange == null) return;\n    const { sortDescendingFirst } = column;\n    if (sortColumn === undefined) {\n      // not currently sorted\n      const nextSort: SortColumn = {\n        columnKey: column.key,\n        direction: sortDescendingFirst ? 'DESC' : 'ASC'\n      };\n      onSortColumnsChange(sortColumns && ctrlClick ? [...sortColumns, nextSort] : [nextSort]);\n    } else {\n      let nextSortColumn: SortColumn | undefined;\n      if (\n        (sortDescendingFirst === true && sortDirection === 'DESC') ||\n        (sortDescendingFirst !== true && sortDirection === 'ASC')\n      ) {\n        nextSortColumn = {\n          columnKey: column.key,\n          direction: sortDirection === 'ASC' ? 'DESC' : 'ASC'\n        };\n      }\n      if (ctrlClick) {\n        const nextSortColumns = [...sortColumns!];\n        if (nextSortColumn) {\n          // swap direction\n          nextSortColumns[sortIndex!] = nextSortColumn;\n        } else {\n          // remove sort\n          nextSortColumns.splice(sortIndex!, 1);\n        }\n        onSortColumnsChange(nextSortColumns);\n      } else {\n        onSortColumnsChange(nextSortColumn ? [nextSortColumn] : []);\n      }\n    }\n  }\n\n  function onClick() {\n    selectCell(column.idx);\n  }\n\n  function onDoubleClick(event: React.MouseEvent<HTMLDivElement>) {\n    const { right, left } = event.currentTarget.getBoundingClientRect();\n    const offset = isRtl ? event.clientX - left : right - event.clientX;\n\n    if (offset > 11) {\n      // +1px to account for the border size\n      return;\n    }\n\n    onColumnResize(column, 'max-content');\n  }\n\n  function handleFocus(event: React.FocusEvent<HTMLDivElement>) {\n    onFocus?.(event);\n    if (shouldFocusGrid) {\n      // Select the first header cell if there is no selected cell\n      selectCell(0);\n    }\n  }\n\n  return (\n    <div\n      role=\"columnheader\"\n      aria-colindex={column.idx + 1}\n      aria-selected={isCellSelected}\n      aria-sort={ariaSort}\n      aria-colspan={colSpan}\n      ref={ref}\n      // set the tabIndex to 0 when there is no selected cell so grid can receive focus\n      tabIndex={shouldFocusGrid ? 0 : tabIndex}\n      className={className}\n      style={getCellStyle(column, colSpan)}\n      onFocus={handleFocus}\n      onClick={onClick}\n      onDoubleClick={column.resizable ? onDoubleClick : undefined}\n      onPointerDown={column.resizable ? onPointerDown : undefined}\n    >\n      {headerRenderer({\n        column,\n        sortDirection,\n        priority,\n        onSort,\n        allRowsSelected,\n        onAllRowsSelectionChange,\n        isCellSelected\n      })}\n    </div>\n  );\n}\n","import { memo } from 'react';\nimport clsx from 'clsx';\nimport { css } from '@linaria/core';\n\nimport HeaderCell from './HeaderCell';\nimport type { CalculatedColumn, Direction } from './types';\nimport { getColSpan, getRowStyle } from './utils';\nimport type { DataGridProps } from './DataGrid';\nimport { cell, cellFrozen, rowSelectedClassname } from './style';\n\ntype SharedDataGridProps<R, SR, K extends React.Key> = Pick<\n  DataGridProps<R, SR, K>,\n  'sortColumns' | 'onSortColumnsChange'\n>;\n\nexport interface HeaderRowProps<R, SR, K extends React.Key> extends SharedDataGridProps<R, SR, K> {\n  columns: readonly CalculatedColumn<R, SR>[];\n  allRowsSelected: boolean;\n  onAllRowsSelectionChange: (checked: boolean) => void;\n  onColumnResize: (column: CalculatedColumn<R, SR>, width: number | 'max-content') => void;\n  selectCell: (columnIdx: number) => void;\n  lastFrozenColumnIndex: number;\n  selectedCellIdx: number | undefined;\n  shouldFocusGrid: boolean;\n  direction: Direction;\n}\n\nconst headerRow = css`\n  @layer rdg.HeaderRow {\n    display: contents;\n    line-height: var(--rdg-header-row-height);\n    background-color: var(--rdg-header-background-color);\n    font-weight: bold;\n\n    & > .${cell} {\n      /* Should have a higher value than 0 to show up above regular cells */\n      z-index: 1;\n      position: sticky;\n      inset-block-start: 0;\n    }\n\n    & > .${cellFrozen} {\n      z-index: 2;\n    }\n  }\n`;\n\nconst headerRowClassname = `rdg-header-row ${headerRow}`;\n\nfunction HeaderRow<R, SR, K extends React.Key>({\n  columns,\n  allRowsSelected,\n  onAllRowsSelectionChange,\n  onColumnResize,\n  sortColumns,\n  onSortColumnsChange,\n  lastFrozenColumnIndex,\n  selectedCellIdx,\n  selectCell,\n  shouldFocusGrid,\n  direction\n}: HeaderRowProps<R, SR, K>) {\n  const cells = [];\n  for (let index = 0; index < columns.length; index++) {\n    const column = columns[index];\n    const colSpan = getColSpan(column, lastFrozenColumnIndex, { type: 'HEADER' });\n    if (colSpan !== undefined) {\n      index += colSpan - 1;\n    }\n\n    cells.push(\n      <HeaderCell<R, SR>\n        key={column.key}\n        column={column}\n        colSpan={colSpan}\n        isCellSelected={selectedCellIdx === column.idx}\n        onColumnResize={onColumnResize}\n        allRowsSelected={allRowsSelected}\n        onAllRowsSelectionChange={onAllRowsSelectionChange}\n        onSortColumnsChange={onSortColumnsChange}\n        sortColumns={sortColumns}\n        selectCell={selectCell}\n        shouldFocusGrid={shouldFocusGrid && index === 0}\n        direction={direction}\n      />\n    );\n  }\n\n  return (\n    <div\n      role=\"row\"\n      aria-rowindex={1} // aria-rowindex is 1 based\n      className={clsx(headerRowClassname, {\n        [rowSelectedClassname]: selectedCellIdx === -1\n      })}\n      style={getRowStyle(1)}\n    >\n      {cells}\n    </div>\n  );\n}\n\nexport default memo(HeaderRow) as <R, SR, K extends React.Key>(\n  props: HeaderRowProps<R, SR, K>\n) => JSX.Element;\n","import { memo } from 'react';\nimport { css } from '@linaria/core';\n\nimport { getCellStyle, getCellClassname, isCellEditable } from './utils';\nimport type { CellRendererProps } from './types';\nimport { useRovingCellRef } from './hooks';\n\nconst cellCopied = css`\n  @layer rdg.Cell {\n    background-color: #ccccff;\n  }\n`;\n\nconst cellCopiedClassname = `rdg-cell-copied ${cellCopied}`;\n\nconst cellDraggedOver = css`\n  @layer rdg.Cell {\n    background-color: #ccccff;\n\n    &.${cellCopied} {\n      background-color: #9999ff;\n    }\n  }\n`;\n\nconst cellDraggedOverClassname = `rdg-cell-dragged-over ${cellDraggedOver}`;\n\nfunction Cell<R, SR>({\n  column,\n  colSpan,\n  isCellSelected,\n  isCopied,\n  isDraggedOver,\n  row,\n  dragHandle,\n  onRowClick,\n  onRowDoubleClick,\n  onRowChange,\n  selectCell,\n  ...props\n}: CellRendererProps<R, SR>) {\n  const { ref, tabIndex, onFocus } = useRovingCellRef(isCellSelected);\n\n  const { cellClass } = column;\n  const className = getCellClassname(\n    column,\n    {\n      [cellCopiedClassname]: isCopied,\n      [cellDraggedOverClassname]: isDraggedOver\n    },\n    typeof cellClass === 'function' ? cellClass(row) : cellClass\n  );\n\n  function selectCellWrapper(openEditor?: boolean | null) {\n    selectCell(row, column, openEditor);\n  }\n\n  function handleClick() {\n    selectCellWrapper(column.editorOptions?.editOnClick);\n    onRowClick?.(row, column);\n  }\n\n  function handleContextMenu() {\n    selectCellWrapper();\n  }\n\n  function handleDoubleClick() {\n    selectCellWrapper(true);\n    onRowDoubleClick?.(row, column);\n  }\n\n  function handleRowChange(newRow: R) {\n    onRowChange(column, newRow);\n  }\n\n  return (\n    <div\n      role=\"gridcell\"\n      aria-colindex={column.idx + 1} // aria-colindex is 1-based\n      aria-selected={isCellSelected}\n      aria-colspan={colSpan}\n      aria-readonly={!isCellEditable(column, row) || undefined}\n      ref={ref}\n      tabIndex={tabIndex}\n      className={className}\n      style={getCellStyle(column, colSpan)}\n      onClick={handleClick}\n      onDoubleClick={handleDoubleClick}\n      onContextMenu={handleContextMenu}\n      onFocus={onFocus}\n      {...props}\n    >\n      {!column.rowGroup && (\n        <>\n          {column.formatter({\n            column,\n            row,\n            isCellSelected,\n            onRowChange: handleRowChange\n          })}\n          {dragHandle}\n        </>\n      )}\n    </div>\n  );\n}\n\nexport default memo(Cell) as <R, SR>(props: CellRendererProps<R, SR>) => JSX.Element;\n","import { memo, forwardRef } from 'react';\nimport type { RefAttributes } from 'react';\nimport clsx from 'clsx';\n\nimport Cell from './Cell';\nimport { RowSelectionProvider, useLatestFunc } from './hooks';\nimport { getColSpan, getRowStyle } from './utils';\nimport { rowClassname, rowSelectedClassname } from './style';\nimport type { CalculatedColumn, RowRendererProps } from './types';\n\nfunction Row<R, SR>(\n  {\n    className,\n    rowIdx,\n    gridRowStart,\n    height,\n    selectedCellIdx,\n    isRowSelected,\n    copiedCellIdx,\n    draggedOverCellIdx,\n    lastFrozenColumnIndex,\n    row,\n    viewportColumns,\n    selectedCellEditor,\n    selectedCellDragHandle,\n    onRowClick,\n    onRowDoubleClick,\n    rowClass,\n    setDraggedOverRowIdx,\n    onMouseEnter,\n    onRowChange,\n    selectCell,\n    ...props\n  }: RowRendererProps<R, SR>,\n  ref: React.Ref<HTMLDivElement>\n) {\n  const handleRowChange = useLatestFunc((column: CalculatedColumn<R, SR>, newRow: R) => {\n    onRowChange(column, rowIdx, newRow);\n  });\n\n  function handleDragEnter(event: React.MouseEvent<HTMLDivElement>) {\n    setDraggedOverRowIdx?.(rowIdx);\n    onMouseEnter?.(event);\n  }\n\n  className = clsx(\n    rowClassname,\n    `rdg-row-${rowIdx % 2 === 0 ? 'even' : 'odd'}`,\n    {\n      [rowSelectedClassname]: selectedCellIdx === -1\n    },\n    rowClass?.(row),\n    className\n  );\n\n  const cells = [];\n\n  for (let index = 0; index < viewportColumns.length; index++) {\n    const column = viewportColumns[index];\n    const { idx } = column;\n    const colSpan = getColSpan(column, lastFrozenColumnIndex, { type: 'ROW', row });\n    if (colSpan !== undefined) {\n      index += colSpan - 1;\n    }\n\n    const isCellSelected = selectedCellIdx === idx;\n\n    if (isCellSelected && selectedCellEditor) {\n      cells.push(selectedCellEditor);\n    } else {\n      cells.push(\n        <Cell\n          key={column.key}\n          column={column}\n          colSpan={colSpan}\n          row={row}\n          isCopied={copiedCellIdx === idx}\n          isDraggedOver={draggedOverCellIdx === idx}\n          isCellSelected={isCellSelected}\n          dragHandle={isCellSelected ? selectedCellDragHandle : undefined}\n          onRowClick={onRowClick}\n          onRowDoubleClick={onRowDoubleClick}\n          onRowChange={handleRowChange}\n          selectCell={selectCell}\n        />\n      );\n    }\n  }\n\n  return (\n    <RowSelectionProvider value={isRowSelected}>\n      <div\n        role=\"row\"\n        ref={ref}\n        className={className}\n        onMouseEnter={handleDragEnter}\n        style={getRowStyle(gridRowStart, height)}\n        {...props}\n      >\n        {cells}\n      </div>\n    </RowSelectionProvider>\n  );\n}\n\nconst RowComponent = memo(forwardRef(Row)) as <R, SR>(\n  props: RowRendererProps<R, SR> & RefAttributes<HTMLDivElement>\n) => JSX.Element;\n\nexport default RowComponent;\n\nexport function defaultRowRenderer<R, SR>(key: React.Key, props: RowRendererProps<R, SR>) {\n  return <RowComponent key={key} {...props} />;\n}\n","import { memo } from 'react';\n\nimport { getCellStyle, getCellClassname } from './utils';\nimport type { CalculatedColumn, GroupRow } from './types';\nimport type { GroupRowRendererProps } from './GroupRow';\nimport { useRovingCellRef } from './hooks';\n\ntype SharedGroupRowRendererProps<R, SR> = Pick<\n  GroupRowRendererProps<R, SR>,\n  'id' | 'groupKey' | 'childRows' | 'isExpanded' | 'toggleGroup'\n>;\n\ninterface GroupCellProps<R, SR> extends SharedGroupRowRendererProps<R, SR> {\n  column: CalculatedColumn<R, SR>;\n  row: GroupRow<R>;\n  isCellSelected: boolean;\n  groupColumnIndex: number;\n}\n\nfunction GroupCell<R, SR>({\n  id,\n  groupKey,\n  childRows,\n  isExpanded,\n  isCellSelected,\n  column,\n  row,\n  groupColumnIndex,\n  toggleGroup: toggleGroupWrapper\n}: GroupCellProps<R, SR>) {\n  const { ref, tabIndex, onFocus } = useRovingCellRef(isCellSelected);\n\n  function toggleGroup() {\n    toggleGroupWrapper(id);\n  }\n\n  // Only make the cell clickable if the group level matches\n  const isLevelMatching = column.rowGroup && groupColumnIndex === column.idx;\n\n  return (\n    <div\n      role=\"gridcell\"\n      aria-colindex={column.idx + 1}\n      aria-selected={isCellSelected}\n      ref={ref}\n      tabIndex={tabIndex}\n      key={column.key}\n      className={getCellClassname(column)}\n      style={{\n        ...getCellStyle(column),\n        cursor: isLevelMatching ? 'pointer' : 'default'\n      }}\n      onClick={isLevelMatching ? toggleGroup : undefined}\n      onFocus={onFocus}\n    >\n      {(!column.rowGroup || groupColumnIndex === column.idx) &&\n        column.groupFormatter?.({\n          groupKey,\n          childRows,\n          column,\n          row,\n          isExpanded,\n          isCellSelected,\n          toggleGroup\n        })}\n    </div>\n  );\n}\n\nexport default memo(GroupCell) as <R, SR>(props: GroupCellProps<R, SR>) => JSX.Element;\n","import { memo } from 'react';\nimport clsx from 'clsx';\nimport { css } from '@linaria/core';\n\nimport { cell, cellFrozenLast, rowClassname, rowSelectedClassname } from './style';\nimport { SELECT_COLUMN_KEY } from './Columns';\nimport GroupCell from './GroupCell';\nimport type { CalculatedColumn, GroupRow, Omit } from './types';\nimport { RowSelectionProvider } from './hooks';\nimport { getRowStyle } from './utils';\n\nexport interface GroupRowRendererProps<R, SR>\n  extends Omit<React.HTMLAttributes<HTMLDivElement>, 'style' | 'children'> {\n  id: string;\n  groupKey: unknown;\n  viewportColumns: readonly CalculatedColumn<R, SR>[];\n  childRows: readonly R[];\n  rowIdx: number;\n  row: GroupRow<R>;\n  gridRowStart: number;\n  height: number;\n  level: number;\n  selectedCellIdx: number | undefined;\n  isExpanded: boolean;\n  isRowSelected: boolean;\n  selectGroup: (rowIdx: number) => void;\n  toggleGroup: (expandedGroupId: unknown) => void;\n}\n\nconst groupRow = css`\n  @layer rdg.GroupedRow {\n    &:not([aria-selected='true']) {\n      background-color: var(--rdg-header-background-color);\n    }\n\n    > .${cell}:not(:last-child):not(.${cellFrozenLast}) {\n      border-inline-end: none;\n    }\n  }\n`;\n\nconst groupRowClassname = `rdg-group-row ${groupRow}`;\n\nfunction GroupedRow<R, SR>({\n  id,\n  groupKey,\n  viewportColumns,\n  childRows,\n  rowIdx,\n  row,\n  gridRowStart,\n  height,\n  level,\n  isExpanded,\n  selectedCellIdx,\n  isRowSelected,\n  selectGroup,\n  toggleGroup,\n  ...props\n}: GroupRowRendererProps<R, SR>) {\n  // Select is always the first column\n  const idx = viewportColumns[0].key === SELECT_COLUMN_KEY ? level + 1 : level;\n\n  function handleSelectGroup() {\n    selectGroup(rowIdx);\n  }\n\n  return (\n    <RowSelectionProvider value={isRowSelected}>\n      <div\n        role=\"row\"\n        aria-level={level}\n        aria-expanded={isExpanded}\n        className={clsx(\n          rowClassname,\n          groupRowClassname,\n          `rdg-row-${rowIdx % 2 === 0 ? 'even' : 'odd'}`,\n          {\n            [rowSelectedClassname]: selectedCellIdx === -1\n          }\n        )}\n        onClick={handleSelectGroup}\n        style={getRowStyle(gridRowStart, height)}\n        {...props}\n      >\n        {viewportColumns.map((column) => (\n          <GroupCell\n            key={column.key}\n            id={id}\n            groupKey={groupKey}\n            childRows={childRows}\n            isExpanded={isExpanded}\n            isCellSelected={selectedCellIdx === column.idx}\n            column={column}\n            row={row}\n            groupColumnIndex={idx}\n            toggleGroup={toggleGroup}\n          />\n        ))}\n      </div>\n    </RowSelectionProvider>\n  );\n}\n\nexport default memo(GroupedRow) as <R, SR>(props: GroupRowRendererProps<R, SR>) => JSX.Element;\n","import { memo } from 'react';\nimport { css } from '@linaria/core';\n\nimport { getCellStyle, getCellClassname } from './utils';\nimport type { CalculatedColumn, CellRendererProps } from './types';\nimport { useRovingCellRef } from './hooks';\n\nexport const summaryCellClassname = css`\n  @layer rdg.SummaryCell {\n    inset-block-start: var(--rdg-summary-row-top);\n    inset-block-end: var(--rdg-summary-row-bottom);\n  }\n`;\n\ninterface SharedCellRendererProps<R, SR>\n  extends Pick<CellRendererProps<R, SR>, 'column' | 'colSpan' | 'isCellSelected'> {\n  selectCell: (row: SR, column: CalculatedColumn<R, SR>) => void;\n}\n\ninterface SummaryCellProps<R, SR> extends SharedCellRendererProps<R, SR> {\n  row: SR;\n}\n\nfunction SummaryCell<R, SR>({\n  column,\n  colSpan,\n  row,\n  isCellSelected,\n  selectCell\n}: SummaryCellProps<R, SR>) {\n  const { ref, tabIndex, onFocus } = useRovingCellRef(isCellSelected);\n  const { summaryCellClass } = column;\n  const className = getCellClassname(\n    column,\n    summaryCellClassname,\n    typeof summaryCellClass === 'function' ? summaryCellClass(row) : summaryCellClass\n  );\n\n  function onClick() {\n    selectCell(row, column);\n  }\n\n  return (\n    <div\n      role=\"gridcell\"\n      aria-colindex={column.idx + 1}\n      aria-colspan={colSpan}\n      aria-selected={isCellSelected}\n      ref={ref}\n      tabIndex={tabIndex}\n      className={className}\n      style={getCellStyle(column, colSpan)}\n      onClick={onClick}\n      onFocus={onFocus}\n    >\n      {column.summaryFormatter?.({ column, row, isCellSelected })}\n    </div>\n  );\n}\n\nexport default memo(SummaryCell) as <R, SR>(props: SummaryCellProps<R, SR>) => JSX.Element;\n","import { memo } from 'react';\nimport clsx from 'clsx';\nimport { css } from '@linaria/core';\n\nimport { cell, cellFrozen, rowClassname, rowSelectedClassname } from './style';\nimport { getColSpan, getRowStyle } from './utils';\nimport SummaryCell from './SummaryCell';\nimport type { CalculatedColumn, RowRendererProps } from './types';\n\ntype SharedRowRendererProps<R, SR> = Pick<\n  RowRendererProps<R, SR>,\n  'viewportColumns' | 'rowIdx' | 'gridRowStart'\n>;\n\ninterface SummaryRowProps<R, SR> extends SharedRowRendererProps<R, SR> {\n  'aria-rowindex': number;\n  row: SR;\n  top: number | undefined;\n  bottom: number | undefined;\n  lastFrozenColumnIndex: number;\n  selectedCellIdx: number | undefined;\n  lastTopRowIdx: number | undefined;\n  selectCell: (row: SR, column: CalculatedColumn<R, SR>) => void;\n}\n\nconst summaryRow = css`\n  @layer rdg.SummaryRow {\n    line-height: var(--rdg-summary-row-height);\n\n    > .${cell} {\n      position: sticky;\n    }\n  }\n`;\n\nconst topSummaryRow = css`\n  @layer rdg.SummaryRow {\n    > .${cell} {\n      z-index: 1;\n    }\n\n    > .${cellFrozen} {\n      z-index: 2;\n    }\n  }\n`;\n\nconst topSummaryRowBorderClassname = css`\n  @layer rdg.SummaryRow {\n    > .${cell} {\n      border-block-end: 2px solid var(--rdg-summary-border-color);\n    }\n  }\n`;\n\nconst bottomSummaryRowBorderClassname = css`\n  @layer rdg.SummaryRow {\n    > .${cell} {\n      border-block-start: 2px solid var(--rdg-summary-border-color);\n    }\n  }\n`;\n\nconst summaryRowClassname = `rdg-summary-row ${summaryRow}`;\n\nconst topSummaryRowClassname = `rdg-top-summary-row ${topSummaryRow}`;\n\nfunction SummaryRow<R, SR>({\n  rowIdx,\n  gridRowStart,\n  row,\n  viewportColumns,\n  top,\n  bottom,\n  lastFrozenColumnIndex,\n  selectedCellIdx,\n  lastTopRowIdx,\n  selectCell,\n  'aria-rowindex': ariaRowIndex\n}: SummaryRowProps<R, SR>) {\n  const cells = [];\n  for (let index = 0; index < viewportColumns.length; index++) {\n    const column = viewportColumns[index];\n    const colSpan = getColSpan(column, lastFrozenColumnIndex, { type: 'SUMMARY', row });\n    if (colSpan !== undefined) {\n      index += colSpan - 1;\n    }\n\n    const isCellSelected = selectedCellIdx === column.idx;\n\n    cells.push(\n      <SummaryCell<R, SR>\n        key={column.key}\n        column={column}\n        colSpan={colSpan}\n        row={row}\n        isCellSelected={isCellSelected}\n        selectCell={selectCell}\n      />\n    );\n  }\n\n  const isTop = lastTopRowIdx !== undefined;\n\n  return (\n    <div\n      role=\"row\"\n      aria-rowindex={ariaRowIndex}\n      className={clsx(\n        rowClassname,\n        `rdg-row-${rowIdx % 2 === 0 ? 'even' : 'odd'}`,\n        summaryRowClassname,\n        {\n          [rowSelectedClassname]: selectedCellIdx === -1,\n          [topSummaryRowClassname]: isTop,\n          [topSummaryRowBorderClassname]: isTop && lastTopRowIdx === rowIdx,\n          [bottomSummaryRowBorderClassname]: !isTop && rowIdx === 0,\n          'rdg-bottom-summary-row': !isTop\n        }\n      )}\n      style={\n        {\n          ...getRowStyle(gridRowStart),\n          '--rdg-summary-row-top': top !== undefined ? `${top}px` : undefined,\n          '--rdg-summary-row-bottom': bottom !== undefined ? `${bottom}px` : undefined\n        } as unknown as React.CSSProperties\n      }\n    >\n      {cells}\n    </div>\n  );\n}\n\nexport default memo(SummaryRow) as <R, SR>(props: SummaryRowProps<R, SR>) => JSX.Element;\n","import { useEffect, useRef } from 'react';\nimport { css } from '@linaria/core';\n\nimport { useLatestFunc } from './hooks';\nimport { getCellStyle, getCellClassname, onEditorNavigation } from './utils';\nimport type { CellRendererProps, EditorProps, Omit } from './types';\n\n/*\n * To check for outside `mousedown` events, we listen to all `mousedown` events at their birth,\n * i.e. on the window during the capture phase, and at their death, i.e. on the window during the bubble phase.\n *\n * We schedule a check at the birth of the event, cancel the check when the event reaches the \"inside\" container,\n * and trigger the \"outside\" callback when the event bubbles back up to the window.\n *\n * The event can be `stopPropagation()`ed halfway through, so they may not always bubble back up to the window,\n * so an alternative check must be used. The check must happen after the event can reach the \"inside\" container,\n * and not before it run to completion. `requestAnimationFrame` is the best way we know how to achieve this.\n * Usually we want click event handlers from parent components to access the latest commited values,\n * so `mousedown` is used instead of `click`.\n *\n * We must also rely on React's event capturing/bubbling to handle elements rendered in a portal.\n */\n\nconst cellEditing = css`\n  @layer rdg.EditCell {\n    padding: 0;\n  }\n`;\n\ntype SharedCellRendererProps<R, SR> = Pick<CellRendererProps<R, SR>, 'colSpan'>;\n\ninterface EditCellProps<R, SR>\n  extends Omit<EditorProps<R, SR>, 'onClose'>,\n    SharedCellRendererProps<R, SR> {\n  closeEditor: () => void;\n}\n\nexport default function EditCell<R, SR>({\n  column,\n  colSpan,\n  row,\n  onRowChange,\n  closeEditor\n}: EditCellProps<R, SR>) {\n  const frameRequestRef = useRef<number | undefined>();\n  const commitOnOutsideClick = column.editorOptions?.commitOnOutsideClick !== false;\n\n  // We need to prevent the `useEffect` from cleaning up between re-renders,\n  // as `onWindowCaptureMouseDown` might otherwise miss valid mousedown events.\n  // To that end we instead access the latest props via useLatestFunc.\n  const commitOnOutsideMouseDown = useLatestFunc(() => {\n    onClose(true);\n  });\n\n  useEffect(() => {\n    if (!commitOnOutsideClick) return;\n\n    function onWindowCaptureMouseDown() {\n      frameRequestRef.current = requestAnimationFrame(commitOnOutsideMouseDown);\n    }\n\n    addEventListener('mousedown', onWindowCaptureMouseDown, { capture: true });\n\n    return () => {\n      removeEventListener('mousedown', onWindowCaptureMouseDown, { capture: true });\n      cancelFrameRequest();\n    };\n  }, [commitOnOutsideClick, commitOnOutsideMouseDown]);\n\n  function cancelFrameRequest() {\n    cancelAnimationFrame(frameRequestRef.current!);\n  }\n\n  function onKeyDown(event: React.KeyboardEvent<HTMLDivElement>) {\n    if (event.key === 'Escape') {\n      event.stopPropagation();\n      // Discard changes\n      onClose();\n    } else if (event.key === 'Enter') {\n      event.stopPropagation();\n      onClose(true);\n    } else {\n      const onNavigation = column.editorOptions?.onNavigation ?? onEditorNavigation;\n      if (!onNavigation(event)) {\n        event.stopPropagation();\n      }\n    }\n  }\n\n  function onClose(commitChanges?: boolean) {\n    if (commitChanges) {\n      onRowChange(row, true);\n    } else {\n      closeEditor();\n    }\n  }\n\n  const { cellClass } = column;\n  const className = getCellClassname(\n    column,\n    'rdg-editor-container',\n    !column.editorOptions?.renderFormatter && cellEditing,\n    typeof cellClass === 'function' ? cellClass(row) : cellClass\n  );\n\n  return (\n    <div\n      role=\"gridcell\"\n      aria-colindex={column.idx + 1} // aria-colindex is 1-based\n      aria-colspan={colSpan}\n      aria-selected\n      className={className}\n      style={getCellStyle(column, colSpan)}\n      onKeyDown={onKeyDown}\n      onMouseDownCapture={commitOnOutsideClick ? cancelFrameRequest : undefined}\n    >\n      {column.editor != null && (\n        <>\n          {column.editor({\n            column,\n            row,\n            onRowChange,\n            onClose\n          })}\n          {column.editorOptions?.renderFormatter &&\n            column.formatter({ column, row, isCellSelected: true, onRowChange })}\n        </>\n      )}\n    </div>\n  );\n}\n","import { css } from '@linaria/core';\n\nimport type { CalculatedColumn, FillEvent, Position } from './types';\nimport type { DataGridProps, SelectCellState } from './DataGrid';\n\nconst cellDragHandle = css`\n  @layer rdg.DragHandle {\n    cursor: move;\n    position: absolute;\n    inset-inline-end: 0;\n    inset-block-end: 0;\n    inline-size: 8px;\n    block-size: 8px;\n    background-color: var(--rdg-selection-color);\n\n    &:hover {\n      inline-size: 16px;\n      block-size: 16px;\n      border: 2px solid var(--rdg-selection-color);\n      background-color: var(--rdg-background-color);\n    }\n  }\n`;\n\nconst cellDragHandleClassname = `rdg-cell-drag-handle ${cellDragHandle}`;\n\ninterface Props<R, SR> extends Pick<DataGridProps<R, SR>, 'rows' | 'onRowsChange'> {\n  columns: readonly CalculatedColumn<R, SR>[];\n  selectedPosition: SelectCellState;\n  latestDraggedOverRowIdx: React.MutableRefObject<number | undefined>;\n  isCellEditable: (position: Position) => boolean;\n  onFill: (event: FillEvent<R>) => R;\n  setDragging: (isDragging: boolean) => void;\n  setDraggedOverRowIdx: (overRowIdx: number | undefined) => void;\n}\n\nexport default function DragHandle<R, SR>({\n  rows,\n  columns,\n  selectedPosition,\n  latestDraggedOverRowIdx,\n  isCellEditable,\n  onRowsChange,\n  onFill,\n  setDragging,\n  setDraggedOverRowIdx\n}: Props<R, SR>) {\n  function handleMouseDown(event: React.MouseEvent<HTMLDivElement>) {\n    if (event.buttons !== 1) return;\n    setDragging(true);\n    window.addEventListener('mouseover', onMouseOver);\n    window.addEventListener('mouseup', onMouseUp);\n\n    function onMouseOver(event: MouseEvent) {\n      // Trigger onMouseup in edge cases where we release the mouse button but `mouseup` isn't triggered,\n      // for example when releasing the mouse button outside the iframe the grid is rendered in.\n      // https://developer.mozilla.org/en-US/docs/Web/API/MouseEvent/buttons\n      if (event.buttons !== 1) onMouseUp();\n    }\n\n    function onMouseUp() {\n      window.removeEventListener('mouseover', onMouseOver);\n      window.removeEventListener('mouseup', onMouseUp);\n      setDragging(false);\n      handleDragEnd();\n    }\n  }\n\n  function handleDragEnd() {\n    const overRowIdx = latestDraggedOverRowIdx.current;\n    if (overRowIdx === undefined) return;\n\n    const { rowIdx } = selectedPosition;\n    const startRowIndex = rowIdx < overRowIdx ? rowIdx + 1 : overRowIdx;\n    const endRowIndex = rowIdx < overRowIdx ? overRowIdx + 1 : rowIdx;\n    updateRows(startRowIndex, endRowIndex);\n    setDraggedOverRowIdx(undefined);\n  }\n\n  function handleDoubleClick(event: React.MouseEvent<HTMLDivElement>) {\n    event.stopPropagation();\n    updateRows(selectedPosition.rowIdx + 1, rows.length);\n  }\n\n  function updateRows(startRowIdx: number, endRowIdx: number) {\n    const { idx, rowIdx } = selectedPosition;\n    const column = columns[idx];\n    const sourceRow = rows[rowIdx];\n    const updatedRows = [...rows];\n    const indexes: number[] = [];\n    for (let i = startRowIdx; i < endRowIdx; i++) {\n      if (isCellEditable({ rowIdx: i, idx })) {\n        const updatedRow = onFill({ columnKey: column.key, sourceRow, targetRow: rows[i] });\n        if (updatedRow !== rows[i]) {\n          updatedRows[i] = updatedRow;\n          indexes.push(i);\n        }\n      }\n    }\n\n    if (indexes.length > 0) {\n      onRowsChange?.(updatedRows, { indexes, column });\n    }\n  }\n\n  return (\n    <div\n      className={cellDragHandleClassname}\n      onMouseDown={handleMouseDown}\n      onDoubleClick={handleDoubleClick}\n    />\n  );\n}\n","import { css } from '@linaria/core';\nimport type { SortStatusProps, SortIconProps, SortPriorityProps } from './types';\n\nconst arrow = css`\n  @layer rdg.SortIcon {\n    fill: currentColor;\n\n    > path {\n      transition: d 0.1s;\n    }\n  }\n`;\n\nconst arrowClassname = `rdg-sort-arrow ${arrow}`;\n\nexport default function sortStatus({ sortDirection, priority }: SortStatusProps) {\n  return (\n    <>\n      {sortIcon({ sortDirection })}\n      {sortPriority({ priority })}\n    </>\n  );\n}\n\nexport function sortIcon({ sortDirection }: SortIconProps) {\n  if (sortDirection === undefined) return null;\n\n  return (\n    <svg viewBox=\"0 0 12 8\" width=\"12\" height=\"8\" className={arrowClassname} aria-hidden>\n      <path d={sortDirection === 'ASC' ? 'M0 8 6 0 12 8' : 'M0 0 6 8 12 0'} />\n    </svg>\n  );\n}\n\nexport function sortPriority({ priority }: SortPriorityProps) {\n  return priority;\n}\n","import { forwardRef, useState, useRef, useImperativeHandle, useCallback, useMemo } from 'react';\nimport type { Key, RefAttributes } from 'react';\nimport { flushSync } from 'react-dom';\nimport clsx from 'clsx';\n\nimport {\n  rootClassname,\n  viewportDraggingClassname,\n  focusSinkClassname,\n  rowSelected,\n  rowSelectedWithFrozenCell\n} from './style';\nimport {\n  useLayoutEffect,\n  useGridDimensions,\n  useCalculatedColumns,\n  useViewportColumns,\n  useViewportRows,\n  useLatestFunc,\n  RowSelectionChangeProvider\n} from './hooks';\nimport HeaderRow from './HeaderRow';\nimport { defaultRowRenderer } from './Row';\nimport GroupRowRenderer from './GroupRow';\nimport SummaryRow from './SummaryRow';\nimport EditCell from './EditCell';\nimport DragHandle from './DragHandle';\nimport { default as defaultSortStatus } from './sortStatus';\nimport { checkboxFormatter as defaultCheckboxFormatter } from './formatters';\nimport {\n  DataGridDefaultComponentsProvider,\n  useDefaultComponents\n} from './DataGridDefaultComponentsProvider';\nimport {\n  assertIsValidKeyGetter,\n  getNextSelectedCellPosition,\n  isSelectedCellEditable,\n  canExitGrid,\n  isCtrlKeyHeldDown,\n  isDefaultCellInput,\n  getColSpan,\n  sign,\n  abs,\n  getSelectedCellColSpan,\n  renderMeasuringCells,\n  scrollIntoView\n} from './utils';\n\nimport type {\n  CalculatedColumn,\n  Column,\n  Position,\n  RowsChangeData,\n  SelectRowEvent,\n  FillEvent,\n  CopyEvent,\n  PasteEvent,\n  CellNavigationMode,\n  SortColumn,\n  RowHeightArgs,\n  Maybe,\n  Renderers,\n  Direction\n} from './types';\n\nexport interface SelectCellState extends Position {\n  readonly mode: 'SELECT';\n}\n\ninterface EditCellState<R> extends Position {\n  readonly mode: 'EDIT';\n  readonly row: R;\n  readonly originalRow: R;\n}\n\ntype DefaultColumnOptions<R, SR> = Pick<\n  Column<R, SR>,\n  'formatter' | 'width' | 'minWidth' | 'maxWidth' | 'resizable' | 'sortable'\n>;\n\nconst initialPosition: SelectCellState = {\n  idx: -1,\n  rowIdx: -2,\n  mode: 'SELECT'\n};\n\nexport interface DataGridHandle {\n  element: HTMLDivElement | null;\n  scrollToColumn: (colIdx: number) => void;\n  scrollToRow: (rowIdx: number) => void;\n  selectCell: (position: Position, enableEditor?: Maybe<boolean>) => void;\n}\n\ntype SharedDivProps = Pick<\n  React.HTMLAttributes<HTMLDivElement>,\n  'aria-label' | 'aria-labelledby' | 'aria-describedby' | 'className' | 'style'\n>;\n\nexport interface DataGridProps<R, SR = unknown, K extends Key = Key> extends SharedDivProps {\n  /**\n   * Grid and data Props\n   */\n  /** An array of objects representing each column on the grid */\n  columns: readonly Column<R, SR>[];\n  /** A function called for each rendered row that should return a plain key/value pair object */\n  rows: readonly R[];\n  /**\n   * Rows to be pinned at the top of the rows view for summary, the vertical scroll bar will not scroll these rows.\n   */\n  topSummaryRows?: Maybe<readonly SR[]>;\n  /**\n   * Rows to be pinned at the bottom of the rows view for summary, the vertical scroll bar will not scroll these rows.\n   */\n  bottomSummaryRows?: Maybe<readonly SR[]>;\n  /** The getter should return a unique key for each row */\n  rowKeyGetter?: Maybe<(row: R) => K>;\n  onRowsChange?: Maybe<(rows: R[], data: RowsChangeData<R, SR>) => void>;\n\n  /**\n   * Dimensions props\n   */\n  /**\n   * The height of each row in pixels\n   * @default 35\n   */\n  rowHeight?: Maybe<number | ((args: RowHeightArgs<R>) => number)>;\n  /**\n   * The height of the header row in pixels\n   * @default 35\n   */\n  headerRowHeight?: Maybe<number>;\n  /**\n   * The height of each summary row in pixels\n   * @default 35\n   */\n  summaryRowHeight?: Maybe<number>;\n\n  /**\n   * Feature props\n   */\n  /** Set of selected row keys */\n  selectedRows?: Maybe<ReadonlySet<K>>;\n  /** Function called whenever row selection is changed */\n  onSelectedRowsChange?: Maybe<(selectedRows: Set<K>) => void>;\n  /** Used for multi column sorting */\n  sortColumns?: Maybe<readonly SortColumn[]>;\n  onSortColumnsChange?: Maybe<(sortColumns: SortColumn[]) => void>;\n  defaultColumnOptions?: Maybe<DefaultColumnOptions<R, SR>>;\n  groupBy?: Maybe<readonly string[]>;\n  rowGrouper?: Maybe<(rows: readonly R[], columnKey: string) => Record<string, readonly R[]>>;\n  expandedGroupIds?: Maybe<ReadonlySet<unknown>>;\n  onExpandedGroupIdsChange?: Maybe<(expandedGroupIds: Set<unknown>) => void>;\n  onFill?: Maybe<(event: FillEvent<R>) => R>;\n  onCopy?: Maybe<(event: CopyEvent<R>) => void>;\n  onPaste?: Maybe<(event: PasteEvent<R>) => R>;\n\n  /**\n   * Event props\n   */\n  /** Function called whenever a row is clicked */\n  onRowClick?: Maybe<(row: R, column: CalculatedColumn<R, SR>) => void>;\n  /** Function called whenever a row is double clicked */\n  onRowDoubleClick?: Maybe<(row: R, column: CalculatedColumn<R, SR>) => void>;\n  /** Called when the grid is scrolled */\n  onScroll?: Maybe<(event: React.UIEvent<HTMLDivElement>) => void>;\n  /** Called when a column is resized */\n  onColumnResize?: Maybe<(idx: number, width: number) => void>;\n\n  /**\n   * Toggles and modes\n   */\n  /** @default 'NONE' */\n  cellNavigationMode?: Maybe<CellNavigationMode>;\n  /** @default true */\n  enableVirtualization?: Maybe<boolean>;\n\n  /**\n   * Miscellaneous\n   */\n  renderers?: Maybe<Renderers<R, SR>>;\n  rowClass?: Maybe<(row: R) => Maybe<string>>;\n  /** @default 'ltr' */\n  direction?: Maybe<Direction>;\n  'data-testid'?: Maybe<string>;\n}\n\n/**\n * Main API Component to render a data grid of rows and columns\n *\n * @example\n *\n * <DataGrid columns={columns} rows={rows} />\n */\nfunction DataGrid<R, SR, K extends Key>(\n  props: DataGridProps<R, SR, K>,\n  ref: React.Ref<DataGridHandle>\n) {\n  const {\n    // Grid and data Props\n    columns: rawColumns,\n    rows: rawRows,\n    topSummaryRows,\n    bottomSummaryRows,\n    rowKeyGetter,\n    onRowsChange,\n    // Dimensions props\n    rowHeight: rawRowHeight,\n    headerRowHeight: rawHeaderRowHeight,\n    summaryRowHeight: rawSummaryRowHeight,\n    // Feature props\n    selectedRows,\n    onSelectedRowsChange,\n    sortColumns,\n    onSortColumnsChange,\n    defaultColumnOptions,\n    groupBy: rawGroupBy,\n    rowGrouper,\n    expandedGroupIds,\n    onExpandedGroupIdsChange,\n    // Event props\n    onRowClick,\n    onRowDoubleClick,\n    onScroll,\n    onColumnResize,\n    onFill,\n    onCopy,\n    onPaste,\n    // Toggles and modes\n    cellNavigationMode: rawCellNavigationMode,\n    enableVirtualization: rawEnableVirtualization,\n    // Miscellaneous\n    renderers,\n    className,\n    style,\n    rowClass,\n    direction: rawDirection,\n    // ARIA\n    'aria-label': ariaLabel,\n    'aria-labelledby': ariaLabelledBy,\n    'aria-describedby': ariaDescribedBy,\n    'data-testid': testId\n  } = props;\n\n  /**\n   * defaults\n   */\n  const defaultComponents = useDefaultComponents<R, SR>();\n  const rowHeight = rawRowHeight ?? 35;\n  const headerRowHeight = rawHeaderRowHeight ?? (typeof rowHeight === 'number' ? rowHeight : 35);\n  const summaryRowHeight = rawSummaryRowHeight ?? (typeof rowHeight === 'number' ? rowHeight : 35);\n  const rowRenderer =\n    renderers?.rowRenderer ?? defaultComponents?.rowRenderer ?? defaultRowRenderer;\n  const sortStatus = renderers?.sortStatus ?? defaultComponents?.sortStatus ?? defaultSortStatus;\n  const checkboxFormatter =\n    renderers?.checkboxFormatter ??\n    defaultComponents?.checkboxFormatter ??\n    defaultCheckboxFormatter;\n  const noRowsFallback = renderers?.noRowsFallback ?? defaultComponents?.noRowsFallback;\n  const cellNavigationMode = rawCellNavigationMode ?? 'NONE';\n  const enableVirtualization = rawEnableVirtualization ?? true;\n  const direction = rawDirection ?? 'ltr';\n\n  /**\n   * states\n   */\n  const [scrollTop, setScrollTop] = useState(0);\n  const [scrollLeft, setScrollLeft] = useState(0);\n  const [columnWidths, setColumnWidths] = useState((): ReadonlyMap<string, number> => new Map());\n  const [selectedPosition, setSelectedPosition] = useState<SelectCellState | EditCellState<R>>(\n    initialPosition\n  );\n  const [copiedCell, setCopiedCell] = useState<{ row: R; columnKey: string } | null>(null);\n  const [isDragging, setDragging] = useState(false);\n  const [draggedOverRowIdx, setOverRowIdx] = useState<number | undefined>(undefined);\n\n  /**\n   * refs\n   */\n  const prevSelectedPosition = useRef(selectedPosition);\n  const latestDraggedOverRowIdx = useRef(draggedOverRowIdx);\n  const lastSelectedRowIdx = useRef(-1);\n  const rowRef = useRef<HTMLDivElement>(null);\n\n  /**\n   * computed values\n   */\n  const [gridRef, gridWidth, gridHeight, isWidthInitialized] = useGridDimensions();\n  const headerRowsCount = 1;\n  const topSummaryRowsCount = topSummaryRows?.length ?? 0;\n  const bottomSummaryRowsCount = bottomSummaryRows?.length ?? 0;\n  const summaryRowsCount = topSummaryRowsCount + bottomSummaryRowsCount;\n  const clientHeight = gridHeight - headerRowHeight - summaryRowsCount * summaryRowHeight;\n  const isSelectable = selectedRows != null && onSelectedRowsChange != null;\n  const isRtl = direction === 'rtl';\n  const leftKey = isRtl ? 'ArrowRight' : 'ArrowLeft';\n  const rightKey = isRtl ? 'ArrowLeft' : 'ArrowRight';\n\n  const defaultGridComponents = useMemo(\n    () => ({\n      sortStatus,\n      checkboxFormatter\n    }),\n    [sortStatus, checkboxFormatter]\n  );\n\n  const allRowsSelected = useMemo((): boolean => {\n    // no rows to select = explicitely unchecked\n    const { length } = rawRows;\n    return (\n      length !== 0 &&\n      selectedRows != null &&\n      rowKeyGetter != null &&\n      selectedRows.size >= length &&\n      rawRows.every((row) => selectedRows.has(rowKeyGetter(row)))\n    );\n  }, [rawRows, selectedRows, rowKeyGetter]);\n\n  const {\n    columns,\n    colSpanColumns,\n    colOverscanStartIdx,\n    colOverscanEndIdx,\n    templateColumns,\n    layoutCssVars,\n    columnMetrics,\n    lastFrozenColumnIndex,\n    totalFrozenColumnWidth,\n    groupBy\n  } = useCalculatedColumns({\n    rawColumns,\n    columnWidths,\n    scrollLeft,\n    viewportWidth: gridWidth,\n    defaultColumnOptions,\n    rawGroupBy: rowGrouper ? rawGroupBy : undefined,\n    enableVirtualization\n  });\n\n  const {\n    rowOverscanStartIdx,\n    rowOverscanEndIdx,\n    rows,\n    rowsCount,\n    totalRowHeight,\n    gridTemplateRows,\n    isGroupRow,\n    getRowTop,\n    getRowHeight,\n    findRowIdx\n  } = useViewportRows({\n    rawRows,\n    groupBy,\n    rowGrouper,\n    rowHeight,\n    clientHeight,\n    scrollTop,\n    expandedGroupIds,\n    enableVirtualization\n  });\n\n  const { viewportColumns, flexWidthViewportColumns } = useViewportColumns({\n    columns,\n    colSpanColumns,\n    colOverscanStartIdx,\n    colOverscanEndIdx,\n    lastFrozenColumnIndex,\n    rowOverscanStartIdx,\n    rowOverscanEndIdx,\n    rows,\n    topSummaryRows,\n    bottomSummaryRows,\n    columnWidths,\n    isGroupRow\n  });\n\n  const hasGroups = groupBy.length > 0 && typeof rowGrouper === 'function';\n  const minColIdx = hasGroups ? -1 : 0;\n  const maxColIdx = columns.length - 1;\n  const minRowIdx = -1 - topSummaryRowsCount;\n  const maxRowIdx = rows.length + bottomSummaryRowsCount - 1;\n  const selectedCellIsWithinSelectionBounds = isCellWithinSelectionBounds(selectedPosition);\n  const selectedCellIsWithinViewportBounds = isCellWithinViewportBounds(selectedPosition);\n\n  /**\n   * The identity of the wrapper function is stable so it won't break memoization\n   */\n  const handleColumnResizeLatest = useLatestFunc(handleColumnResize);\n  const onSortColumnsChangeLatest = useLatestFunc(onSortColumnsChange);\n  const onRowClickLatest = useLatestFunc(onRowClick);\n  const onRowDoubleClickLatest = useLatestFunc(onRowDoubleClick);\n  const selectRowLatest = useLatestFunc(selectRow);\n  const selectAllRowsLatest = useLatestFunc(selectAllRows);\n  const handleFormatterRowChangeLatest = useLatestFunc(updateRow);\n  const selectViewportCellLatest = useLatestFunc(\n    (row: R, column: CalculatedColumn<R, SR>, enableEditor: Maybe<boolean>) => {\n      const rowIdx = rows.indexOf(row);\n      selectCell({ rowIdx, idx: column.idx }, enableEditor);\n    }\n  );\n  const selectGroupLatest = useLatestFunc((rowIdx: number) => {\n    selectCell({ rowIdx, idx: -1 });\n  });\n  const selectHeaderCellLatest = useLatestFunc((idx: number) => {\n    selectCell({ rowIdx: minRowIdx, idx });\n  });\n  const selectTopSummaryCellLatest = useLatestFunc(\n    (summaryRow: SR, column: CalculatedColumn<R, SR>) => {\n      const rowIdx = topSummaryRows!.indexOf(summaryRow);\n      selectCell({ rowIdx: rowIdx + minRowIdx + 1, idx: column.idx });\n    }\n  );\n  const selectBottomSummaryCellLatest = useLatestFunc(\n    (summaryRow: SR, column: CalculatedColumn<R, SR>) => {\n      const rowIdx = bottomSummaryRows!.indexOf(summaryRow) + rows.length;\n      selectCell({ rowIdx, idx: column.idx });\n    }\n  );\n  const toggleGroupLatest = useLatestFunc(toggleGroup);\n\n  /**\n   * effects\n   */\n  useLayoutEffect(() => {\n    if (\n      !selectedCellIsWithinSelectionBounds ||\n      isSamePosition(selectedPosition, prevSelectedPosition.current)\n    ) {\n      prevSelectedPosition.current = selectedPosition;\n      return;\n    }\n\n    prevSelectedPosition.current = selectedPosition;\n\n    if (selectedPosition.idx === -1) {\n      rowRef.current!.focus({ preventScroll: true });\n      scrollIntoView(rowRef.current);\n    }\n  });\n\n  useLayoutEffect(() => {\n    if (!isWidthInitialized || flexWidthViewportColumns.length === 0) return;\n\n    setColumnWidths((columnWidths) => {\n      const newColumnWidths = new Map(columnWidths);\n      const grid = gridRef.current!;\n\n      for (const column of flexWidthViewportColumns) {\n        const measuringCell = grid.querySelector(`[data-measuring-cell-key=\"${column.key}\"]`)!;\n        // Set the actual width of the column after it is rendered\n        const { width } = measuringCell.getBoundingClientRect();\n        newColumnWidths.set(column.key, width);\n      }\n\n      return newColumnWidths;\n    });\n  }, [isWidthInitialized, flexWidthViewportColumns, gridRef]);\n\n  useImperativeHandle(ref, () => ({\n    element: gridRef.current,\n    scrollToColumn,\n    scrollToRow(rowIdx: number) {\n      const { current } = gridRef;\n      if (!current) return;\n      current.scrollTo({\n        top: getRowTop(rowIdx),\n        behavior: 'smooth'\n      });\n    },\n    selectCell\n  }));\n\n  /**\n   * callbacks\n   */\n  const setDraggedOverRowIdx = useCallback((rowIdx?: number) => {\n    setOverRowIdx(rowIdx);\n    latestDraggedOverRowIdx.current = rowIdx;\n  }, []);\n\n  /**\n   * event handlers\n   */\n  function handleColumnResize(column: CalculatedColumn<R, SR>, width: number | 'max-content') {\n    const { style } = gridRef.current!;\n    const newTemplateColumns = [...templateColumns];\n    newTemplateColumns[column.idx] = width === 'max-content' ? width : `${width}px`;\n    style.gridTemplateColumns = newTemplateColumns.join(' ');\n\n    const measuringCell = gridRef.current!.querySelector(\n      `[data-measuring-cell-key=\"${column.key}\"]`\n    )!;\n    const measuredWidth = measuringCell.getBoundingClientRect().width;\n    const measuredWidthPx = `${measuredWidth}px`;\n\n    // Immediately update `grid-template-columns` to prevent the column from jumping to its min/max allowed width.\n    // Only measuring cells have the min/max width set for proper colSpan support,\n    // which is why other cells may render at the previously set width, beyond the min/max.\n    // An alternative for the above would be to use flushSync.\n    // We also have to reset `max-content` so it doesn't remain stuck on `max-content`.\n    if (newTemplateColumns[column.idx] !== measuredWidthPx) {\n      newTemplateColumns[column.idx] = measuredWidthPx;\n      style.gridTemplateColumns = newTemplateColumns.join(' ');\n    }\n\n    if (columnWidths.get(column.key) === measuredWidth) return;\n\n    const newColumnWidths = new Map(columnWidths);\n    newColumnWidths.set(column.key, measuredWidth);\n    setColumnWidths(newColumnWidths);\n\n    onColumnResize?.(column.idx, measuredWidth);\n  }\n\n  function selectRow({ row, checked, isShiftClick }: SelectRowEvent<R>) {\n    if (!onSelectedRowsChange) return;\n\n    assertIsValidKeyGetter<R, K>(rowKeyGetter);\n    const newSelectedRows = new Set(selectedRows);\n    if (isGroupRow(row)) {\n      for (const childRow of row.childRows) {\n        const rowKey = rowKeyGetter(childRow);\n        if (checked) {\n          newSelectedRows.add(rowKey);\n        } else {\n          newSelectedRows.delete(rowKey);\n        }\n      }\n      onSelectedRowsChange(newSelectedRows);\n      return;\n    }\n\n    const rowKey = rowKeyGetter(row);\n    if (checked) {\n      newSelectedRows.add(rowKey);\n      const previousRowIdx = lastSelectedRowIdx.current;\n      const rowIdx = rows.indexOf(row);\n      lastSelectedRowIdx.current = rowIdx;\n      if (isShiftClick && previousRowIdx !== -1 && previousRowIdx !== rowIdx) {\n        const step = sign(rowIdx - previousRowIdx);\n        for (let i = previousRowIdx + step; i !== rowIdx; i += step) {\n          const row = rows[i];\n          if (isGroupRow(row)) continue;\n          newSelectedRows.add(rowKeyGetter(row));\n        }\n      }\n    } else {\n      newSelectedRows.delete(rowKey);\n      lastSelectedRowIdx.current = -1;\n    }\n\n    onSelectedRowsChange(newSelectedRows);\n  }\n\n  function selectAllRows(checked: boolean) {\n    if (!onSelectedRowsChange) return;\n\n    assertIsValidKeyGetter<R, K>(rowKeyGetter);\n    const newSelectedRows = new Set(selectedRows);\n\n    for (const row of rawRows) {\n      const rowKey = rowKeyGetter(row);\n      if (checked) {\n        newSelectedRows.add(rowKey);\n      } else {\n        newSelectedRows.delete(rowKey);\n      }\n    }\n\n    onSelectedRowsChange(newSelectedRows);\n  }\n\n  function toggleGroup(expandedGroupId: unknown) {\n    if (!onExpandedGroupIdsChange) return;\n    const newExpandedGroupIds = new Set(expandedGroupIds);\n    if (newExpandedGroupIds.has(expandedGroupId)) {\n      newExpandedGroupIds.delete(expandedGroupId);\n    } else {\n      newExpandedGroupIds.add(expandedGroupId);\n    }\n    onExpandedGroupIdsChange(newExpandedGroupIds);\n  }\n\n  function handleKeyDown(event: React.KeyboardEvent<HTMLDivElement>) {\n    if (!(event.target instanceof Element)) return;\n    const isCellEvent = event.target.closest('.rdg-cell') !== null;\n    const isRowEvent = hasGroups && event.target === rowRef.current;\n    if (!isCellEvent && !isRowEvent) return;\n\n    const { key, keyCode } = event;\n    const { rowIdx } = selectedPosition;\n\n    if (\n      selectedCellIsWithinViewportBounds &&\n      (onPaste != null || onCopy != null) &&\n      isCtrlKeyHeldDown(event) &&\n      !isGroupRow(rows[rowIdx]) &&\n      selectedPosition.mode === 'SELECT'\n    ) {\n      // event.key may differ by keyboard input language, so we use event.keyCode instead\n      // event.nativeEvent.code cannot be used either as it would break copy/paste for the DVORAK layout\n      const cKey = 67;\n      const vKey = 86;\n      if (keyCode === cKey) {\n        handleCopy();\n        return;\n      }\n      if (keyCode === vKey) {\n        handlePaste();\n        return;\n      }\n    }\n\n    if (isRowIdxWithinViewportBounds(rowIdx)) {\n      const row = rows[rowIdx];\n\n      if (\n        isGroupRow(row) &&\n        selectedPosition.idx === -1 &&\n        // Collapse the current group row if it is focused and is in expanded state\n        ((key === leftKey && row.isExpanded) ||\n          // Expand the current group row if it is focused and is in collapsed state\n          (key === rightKey && !row.isExpanded))\n      ) {\n        event.preventDefault(); // Prevents scrolling\n        toggleGroup(row.id);\n        return;\n      }\n    }\n\n    switch (event.key) {\n      case 'Escape':\n        setCopiedCell(null);\n        return;\n      case 'ArrowUp':\n      case 'ArrowDown':\n      case 'ArrowLeft':\n      case 'ArrowRight':\n      case 'Tab':\n      case 'Home':\n      case 'End':\n      case 'PageUp':\n      case 'PageDown':\n        navigate(event);\n        break;\n      default:\n        handleCellInput(event);\n        break;\n    }\n  }\n\n  function handleScroll(event: React.UIEvent<HTMLDivElement>) {\n    const { scrollTop, scrollLeft } = event.currentTarget;\n    flushSync(() => {\n      setScrollTop(scrollTop);\n      // scrollLeft is nagative when direction is rtl\n      setScrollLeft(abs(scrollLeft));\n    });\n    onScroll?.(event);\n  }\n\n  function getRawRowIdx(rowIdx: number) {\n    return hasGroups ? rawRows.indexOf(rows[rowIdx] as R) : rowIdx;\n  }\n\n  function updateRow(column: CalculatedColumn<R, SR>, rowIdx: number, row: R) {\n    if (typeof onRowsChange !== 'function') return;\n    const rawRowIdx = getRawRowIdx(rowIdx);\n    if (row === rawRows[rawRowIdx]) return;\n    const updatedRows = [...rawRows];\n    updatedRows[rawRowIdx] = row;\n    onRowsChange(updatedRows, {\n      indexes: [rawRowIdx],\n      column\n    });\n  }\n\n  function commitEditorChanges() {\n    if (selectedPosition.mode !== 'EDIT') return;\n    updateRow(columns[selectedPosition.idx], selectedPosition.rowIdx, selectedPosition.row);\n  }\n\n  function handleCopy() {\n    const { idx, rowIdx } = selectedPosition;\n    const sourceRow = rawRows[getRawRowIdx(rowIdx)];\n    const sourceColumnKey = columns[idx].key;\n    setCopiedCell({ row: sourceRow, columnKey: sourceColumnKey });\n    onCopy?.({ sourceRow, sourceColumnKey });\n  }\n\n  function handlePaste() {\n    if (!onPaste || !onRowsChange || copiedCell === null || !isCellEditable(selectedPosition)) {\n      return;\n    }\n\n    const { idx, rowIdx } = selectedPosition;\n    const targetColumn = columns[idx];\n    const targetRow = rawRows[getRawRowIdx(rowIdx)];\n\n    const updatedTargetRow = onPaste({\n      sourceRow: copiedCell.row,\n      sourceColumnKey: copiedCell.columnKey,\n      targetRow,\n      targetColumnKey: targetColumn.key\n    });\n\n    updateRow(targetColumn, rowIdx, updatedTargetRow);\n  }\n\n  function handleCellInput(event: React.KeyboardEvent<HTMLDivElement>) {\n    if (!selectedCellIsWithinViewportBounds) return;\n    const row = rows[selectedPosition.rowIdx];\n    if (isGroupRow(row)) return;\n    const { key, shiftKey } = event;\n\n    // Select the row on Shift + Space\n    if (isSelectable && shiftKey && key === ' ') {\n      assertIsValidKeyGetter<R, K>(rowKeyGetter);\n      const rowKey = rowKeyGetter(row);\n      selectRow({ row, checked: !selectedRows.has(rowKey), isShiftClick: false });\n      // do not scroll\n      event.preventDefault();\n      return;\n    }\n\n    const column = columns[selectedPosition.idx];\n    column.editorOptions?.onCellKeyDown?.(event);\n    if (event.isDefaultPrevented()) return;\n\n    if (isCellEditable(selectedPosition) && isDefaultCellInput(event)) {\n      setSelectedPosition(({ idx, rowIdx }) => ({\n        idx,\n        rowIdx,\n        mode: 'EDIT',\n        row,\n        originalRow: row\n      }));\n    }\n  }\n\n  /**\n   * utils\n   */\n  function isColIdxWithinSelectionBounds(idx: number) {\n    return idx >= minColIdx && idx <= maxColIdx;\n  }\n\n  function isRowIdxWithinViewportBounds(rowIdx: number) {\n    return rowIdx >= 0 && rowIdx < rows.length;\n  }\n\n  function isCellWithinSelectionBounds({ idx, rowIdx }: Position): boolean {\n    return rowIdx >= minRowIdx && rowIdx <= maxRowIdx && isColIdxWithinSelectionBounds(idx);\n  }\n\n  function isCellWithinViewportBounds({ idx, rowIdx }: Position): boolean {\n    return isRowIdxWithinViewportBounds(rowIdx) && isColIdxWithinSelectionBounds(idx);\n  }\n\n  function isCellEditable(position: Position): boolean {\n    return (\n      isCellWithinViewportBounds(position) &&\n      isSelectedCellEditable({ columns, rows, selectedPosition: position, isGroupRow })\n    );\n  }\n\n  function selectCell(position: Position, enableEditor?: Maybe<boolean>): void {\n    if (!isCellWithinSelectionBounds(position)) return;\n    commitEditorChanges();\n\n    if (enableEditor && isCellEditable(position)) {\n      const row = rows[position.rowIdx] as R;\n      setSelectedPosition({ ...position, mode: 'EDIT', row, originalRow: row });\n    } else if (isSamePosition(selectedPosition, position)) {\n      // Avoid re-renders if the selected cell state is the same\n      scrollIntoView(gridRef.current?.querySelector('[tabindex=\"0\"]'));\n    } else {\n      setSelectedPosition({ ...position, mode: 'SELECT' });\n    }\n  }\n\n  function scrollToColumn(idx: number): void {\n    const { current } = gridRef;\n    if (!current) return;\n\n    if (idx > lastFrozenColumnIndex) {\n      const { rowIdx } = selectedPosition;\n      if (!isCellWithinSelectionBounds({ rowIdx, idx })) return;\n      const { clientWidth } = current;\n      const column = columns[idx];\n      const { left, width } = columnMetrics.get(column)!;\n      let right = left + width;\n\n      const colSpan = getSelectedCellColSpan({\n        rows,\n        topSummaryRows,\n        bottomSummaryRows,\n        rowIdx,\n        lastFrozenColumnIndex,\n        column,\n        isGroupRow\n      });\n\n      if (colSpan !== undefined) {\n        const { left, width } = columnMetrics.get(columns[column.idx + colSpan - 1])!;\n        right = left + width;\n      }\n\n      const isCellAtLeftBoundary = left < scrollLeft + totalFrozenColumnWidth;\n      const isCellAtRightBoundary = right > clientWidth + scrollLeft;\n      const sign = isRtl ? -1 : 1;\n      if (isCellAtLeftBoundary) {\n        current.scrollLeft = (left - totalFrozenColumnWidth) * sign;\n      } else if (isCellAtRightBoundary) {\n        current.scrollLeft = (right - clientWidth) * sign;\n      }\n    }\n  }\n\n  function getNextPosition(key: string, ctrlKey: boolean, shiftKey: boolean): Position {\n    const { idx, rowIdx } = selectedPosition;\n    const row = rows[rowIdx];\n    const isRowSelected = selectedCellIsWithinSelectionBounds && idx === -1;\n\n    // If a group row is focused, and it is collapsed, move to the parent group row (if there is one).\n    if (key === leftKey && isRowSelected && isGroupRow(row) && !row.isExpanded && row.level !== 0) {\n      let parentRowIdx = -1;\n      for (let i = selectedPosition.rowIdx - 1; i >= 0; i--) {\n        const parentRow = rows[i];\n        if (isGroupRow(parentRow) && parentRow.id === row.parentId) {\n          parentRowIdx = i;\n          break;\n        }\n      }\n      if (parentRowIdx !== -1) {\n        return { idx, rowIdx: parentRowIdx };\n      }\n    }\n\n    switch (key) {\n      case 'ArrowUp':\n        return { idx, rowIdx: rowIdx - 1 };\n      case 'ArrowDown':\n        return { idx, rowIdx: rowIdx + 1 };\n      case leftKey:\n        return { idx: idx - 1, rowIdx };\n      case rightKey:\n        return { idx: idx + 1, rowIdx };\n      case 'Tab':\n        return { idx: idx + (shiftKey ? -1 : 1), rowIdx };\n      case 'Home':\n        // If row is selected then move focus to the first row\n        if (isRowSelected) return { idx, rowIdx: 0 };\n        return { idx: 0, rowIdx: ctrlKey ? minRowIdx : rowIdx };\n      case 'End':\n        // If row is selected then move focus to the last row.\n        if (isRowSelected) return { idx, rowIdx: rows.length - 1 };\n        return { idx: maxColIdx, rowIdx: ctrlKey ? maxRowIdx : rowIdx };\n      case 'PageUp': {\n        if (selectedPosition.rowIdx === minRowIdx) return selectedPosition;\n        const nextRowY = getRowTop(rowIdx) + getRowHeight(rowIdx) - clientHeight;\n        return { idx, rowIdx: nextRowY > 0 ? findRowIdx(nextRowY) : 0 };\n      }\n      case 'PageDown': {\n        if (selectedPosition.rowIdx >= rows.length) return selectedPosition;\n        const nextRowY = getRowTop(rowIdx) + clientHeight;\n        return { idx, rowIdx: nextRowY < totalRowHeight ? findRowIdx(nextRowY) : rows.length - 1 };\n      }\n      default:\n        return selectedPosition;\n    }\n  }\n\n  function navigate(event: React.KeyboardEvent<HTMLDivElement>) {\n    const { key, shiftKey } = event;\n    let mode = cellNavigationMode;\n    if (key === 'Tab') {\n      if (\n        canExitGrid({\n          shiftKey,\n          cellNavigationMode,\n          maxColIdx,\n          minRowIdx,\n          maxRowIdx,\n          selectedPosition\n        })\n      ) {\n        commitEditorChanges();\n        // Allow focus to leave the grid so the next control in the tab order can be focused\n        return;\n      }\n\n      mode = cellNavigationMode === 'NONE' ? 'CHANGE_ROW' : cellNavigationMode;\n    }\n\n    // Do not allow focus to leave\n    event.preventDefault();\n\n    const ctrlKey = isCtrlKeyHeldDown(event);\n    const nextPosition = getNextPosition(key, ctrlKey, shiftKey);\n    if (isSamePosition(selectedPosition, nextPosition)) return;\n\n    const nextSelectedCellPosition = getNextSelectedCellPosition({\n      columns,\n      colSpanColumns,\n      rows,\n      topSummaryRows,\n      bottomSummaryRows,\n      minRowIdx,\n      maxRowIdx,\n      lastFrozenColumnIndex,\n      cellNavigationMode: mode,\n      currentPosition: selectedPosition,\n      nextPosition,\n      isCellWithinBounds: isCellWithinSelectionBounds,\n      isGroupRow\n    });\n\n    selectCell(nextSelectedCellPosition);\n  }\n\n  function getDraggedOverCellIdx(currentRowIdx: number): number | undefined {\n    if (draggedOverRowIdx === undefined) return;\n    const { rowIdx } = selectedPosition;\n\n    const isDraggedOver =\n      rowIdx < draggedOverRowIdx\n        ? rowIdx < currentRowIdx && currentRowIdx <= draggedOverRowIdx\n        : rowIdx > currentRowIdx && currentRowIdx >= draggedOverRowIdx;\n\n    return isDraggedOver ? selectedPosition.idx : undefined;\n  }\n\n  function getLayoutCssVars() {\n    if (flexWidthViewportColumns.length === 0) return layoutCssVars;\n    const newTemplateColumns = [...templateColumns];\n    for (const column of flexWidthViewportColumns) {\n      newTemplateColumns[column.idx] = column.width as string;\n    }\n\n    return {\n      ...layoutCssVars,\n      gridTemplateColumns: newTemplateColumns.join(' ')\n    };\n  }\n\n  function getDragHandle(rowIdx: number) {\n    if (\n      selectedPosition.rowIdx !== rowIdx ||\n      selectedPosition.mode === 'EDIT' ||\n      hasGroups || // drag fill is not supported when grouping is enabled\n      onFill == null\n    ) {\n      return;\n    }\n\n    return (\n      <DragHandle\n        rows={rawRows}\n        columns={columns}\n        selectedPosition={selectedPosition}\n        isCellEditable={isCellEditable}\n        latestDraggedOverRowIdx={latestDraggedOverRowIdx}\n        onRowsChange={onRowsChange}\n        onFill={onFill}\n        setDragging={setDragging}\n        setDraggedOverRowIdx={setDraggedOverRowIdx}\n      />\n    );\n  }\n\n  function getCellEditor(rowIdx: number) {\n    if (selectedPosition.rowIdx !== rowIdx || selectedPosition.mode === 'SELECT') return;\n\n    const { idx, row } = selectedPosition;\n    const column = columns[idx];\n    const colSpan = getColSpan(column, lastFrozenColumnIndex, { type: 'ROW', row });\n\n    const closeEditor = () => {\n      setSelectedPosition(({ idx, rowIdx }) => ({ idx, rowIdx, mode: 'SELECT' }));\n    };\n\n    const onRowChange = (row: R, commitChanges?: boolean) => {\n      if (commitChanges) {\n        updateRow(column, selectedPosition.rowIdx, row);\n        closeEditor();\n      } else {\n        setSelectedPosition((position) => ({ ...position, row }));\n      }\n    };\n\n    if (rows[selectedPosition.rowIdx] !== selectedPosition.originalRow) {\n      // Discard changes if rows are updated from outside\n      closeEditor();\n    }\n\n    return (\n      <EditCell\n        key={column.key}\n        column={column}\n        colSpan={colSpan}\n        row={row}\n        onRowChange={onRowChange}\n        closeEditor={closeEditor}\n      />\n    );\n  }\n\n  function getRowViewportColumns(rowIdx: number) {\n    const selectedColumn = columns[selectedPosition.idx];\n    if (\n      // idx can be -1 if grouping is enabled\n      // eslint-disable-next-line @typescript-eslint/no-unnecessary-condition\n      selectedColumn !== undefined &&\n      selectedPosition.rowIdx === rowIdx &&\n      !viewportColumns.includes(selectedColumn)\n    ) {\n      // Add the selected column to viewport columns if the cell is not within the viewport\n      return selectedPosition.idx > colOverscanEndIdx\n        ? [...viewportColumns, selectedColumn]\n        : [\n            ...viewportColumns.slice(0, lastFrozenColumnIndex + 1),\n            selectedColumn,\n            ...viewportColumns.slice(lastFrozenColumnIndex + 1)\n          ];\n    }\n    return viewportColumns;\n  }\n\n  function getViewportRows() {\n    const rowElements: React.ReactNode[] = [];\n    let startRowIndex = 0;\n\n    const { idx: selectedIdx, rowIdx: selectedRowIdx } = selectedPosition;\n\n    const startRowIdx =\n      selectedCellIsWithinViewportBounds && selectedRowIdx < rowOverscanStartIdx\n        ? rowOverscanStartIdx - 1\n        : rowOverscanStartIdx;\n    const endRowIdx =\n      selectedCellIsWithinViewportBounds && selectedRowIdx > rowOverscanEndIdx\n        ? rowOverscanEndIdx + 1\n        : rowOverscanEndIdx;\n\n    for (let viewportRowIdx = startRowIdx; viewportRowIdx <= endRowIdx; viewportRowIdx++) {\n      const isRowOutsideViewport =\n        viewportRowIdx === rowOverscanStartIdx - 1 || viewportRowIdx === rowOverscanEndIdx + 1;\n      const rowIdx = isRowOutsideViewport ? selectedRowIdx : viewportRowIdx;\n\n      let rowColumns = viewportColumns;\n      const selectedColumn = columns[selectedIdx];\n      // selectedIdx can be -1 if grouping is enabled\n      // eslint-disable-next-line @typescript-eslint/no-unnecessary-condition\n      if (selectedColumn !== undefined) {\n        if (isRowOutsideViewport) {\n          // if the row is outside the viewport then only render the selected cell\n          rowColumns = [selectedColumn];\n        } else {\n          // if the row is within the viewport and cell is not, add the selected column to viewport columns\n          rowColumns = getRowViewportColumns(rowIdx);\n        }\n      }\n\n      const row = rows[rowIdx];\n      const gridRowStart = headerRowsCount + topSummaryRowsCount + rowIdx + 1;\n      if (isGroupRow(row)) {\n        ({ startRowIndex } = row);\n        const isGroupRowSelected =\n          isSelectable && row.childRows.every((cr) => selectedRows.has(rowKeyGetter!(cr)));\n        rowElements.push(\n          <GroupRowRenderer\n            aria-level={row.level + 1} // aria-level is 1-based\n            aria-setsize={row.setSize}\n            aria-posinset={row.posInSet + 1} // aria-posinset is 1-based\n            aria-rowindex={headerRowsCount + topSummaryRowsCount + startRowIndex + 1} // aria-rowindex is 1 based\n            aria-selected={isSelectable ? isGroupRowSelected : undefined}\n            key={row.id}\n            id={row.id}\n            groupKey={row.groupKey}\n            viewportColumns={rowColumns}\n            childRows={row.childRows}\n            rowIdx={rowIdx}\n            row={row}\n            gridRowStart={gridRowStart}\n            height={getRowHeight(rowIdx)}\n            level={row.level}\n            isExpanded={row.isExpanded}\n            selectedCellIdx={selectedRowIdx === rowIdx ? selectedIdx : undefined}\n            isRowSelected={isGroupRowSelected}\n            selectGroup={selectGroupLatest}\n            toggleGroup={toggleGroupLatest}\n          />\n        );\n        continue;\n      }\n\n      startRowIndex++;\n      let key;\n      let isRowSelected = false;\n      if (typeof rowKeyGetter === 'function') {\n        key = rowKeyGetter(row);\n        isRowSelected = selectedRows?.has(key) ?? false;\n      } else {\n        key = hasGroups ? startRowIndex : rowIdx;\n      }\n\n      rowElements.push(\n        rowRenderer(key, {\n          // aria-rowindex is 1 based\n          'aria-rowindex':\n            headerRowsCount + topSummaryRowsCount + (hasGroups ? startRowIndex : rowIdx) + 1,\n          'aria-selected': isSelectable ? isRowSelected : undefined,\n          rowIdx,\n          row,\n          viewportColumns: rowColumns,\n          isRowSelected,\n          onRowClick: onRowClickLatest,\n          onRowDoubleClick: onRowDoubleClickLatest,\n          rowClass,\n          gridRowStart,\n          height: getRowHeight(rowIdx),\n          copiedCellIdx:\n            copiedCell !== null && copiedCell.row === row\n              ? columns.findIndex((c) => c.key === copiedCell.columnKey)\n              : undefined,\n\n          selectedCellIdx: selectedRowIdx === rowIdx ? selectedIdx : undefined,\n          draggedOverCellIdx: getDraggedOverCellIdx(rowIdx),\n          setDraggedOverRowIdx: isDragging ? setDraggedOverRowIdx : undefined,\n          lastFrozenColumnIndex,\n          onRowChange: handleFormatterRowChangeLatest,\n          selectCell: selectViewportCellLatest,\n          selectedCellDragHandle: getDragHandle(rowIdx),\n          selectedCellEditor: getCellEditor(rowIdx)\n        })\n      );\n    }\n\n    return rowElements;\n  }\n\n  // Reset the positions if the current values are no longer valid. This can happen if a column or row is removed\n  if (selectedPosition.idx > maxColIdx || selectedPosition.rowIdx > maxRowIdx) {\n    setSelectedPosition(initialPosition);\n    setDraggedOverRowIdx(undefined);\n  }\n\n  let templateRows = `${headerRowHeight}px`;\n  if (topSummaryRowsCount > 0) {\n    templateRows += ` repeat(${topSummaryRowsCount}, ${summaryRowHeight}px)`;\n  }\n  if (rows.length > 0) {\n    templateRows += gridTemplateRows;\n  }\n  if (bottomSummaryRowsCount > 0) {\n    templateRows += ` repeat(${bottomSummaryRowsCount}, ${summaryRowHeight}px)`;\n  }\n\n  const isGroupRowFocused = selectedPosition.idx === -1 && selectedPosition.rowIdx !== -2;\n\n  return (\n    <div\n      role={hasGroups ? 'treegrid' : 'grid'}\n      aria-label={ariaLabel}\n      aria-labelledby={ariaLabelledBy}\n      aria-describedby={ariaDescribedBy}\n      aria-multiselectable={isSelectable ? true : undefined}\n      aria-colcount={columns.length}\n      aria-rowcount={headerRowsCount + rowsCount + summaryRowsCount}\n      className={clsx(\n        rootClassname,\n        {\n          [viewportDraggingClassname]: isDragging\n        },\n        className\n      )}\n      style={\n        {\n          ...style,\n          // set scrollPadding to correctly position non-sticky cells after scrolling\n          scrollPaddingInlineStart:\n            selectedPosition.idx > lastFrozenColumnIndex\n              ? `${totalFrozenColumnWidth}px`\n              : undefined,\n          scrollPaddingBlock:\n            selectedPosition.rowIdx >= 0 && selectedPosition.rowIdx < rows.length\n              ? `${headerRowHeight + topSummaryRowsCount * summaryRowHeight}px ${\n                  bottomSummaryRowsCount * summaryRowHeight\n                }px`\n              : undefined,\n          gridTemplateRows: templateRows,\n          '--rdg-header-row-height': `${headerRowHeight}px`,\n          '--rdg-summary-row-height': `${summaryRowHeight}px`,\n          '--rdg-sign': isRtl ? -1 : 1,\n          ...getLayoutCssVars()\n        } as unknown as React.CSSProperties\n      }\n      dir={direction}\n      ref={gridRef}\n      onScroll={handleScroll}\n      onKeyDown={handleKeyDown}\n      data-testid={testId}\n    >\n      {/* extra div is needed for row navigation in a treegrid */}\n      {hasGroups && (\n        <div\n          ref={rowRef}\n          tabIndex={isGroupRowFocused ? 0 : -1}\n          className={clsx(focusSinkClassname, {\n            [rowSelected]: isGroupRowFocused,\n            [rowSelectedWithFrozenCell]: isGroupRowFocused && lastFrozenColumnIndex !== -1\n          })}\n          style={{\n            gridRowStart: selectedPosition.rowIdx + 2\n          }}\n          onKeyDown={handleKeyDown}\n        />\n      )}\n      <DataGridDefaultComponentsProvider value={defaultGridComponents}>\n        <HeaderRow\n          columns={getRowViewportColumns(-1)}\n          onColumnResize={handleColumnResizeLatest}\n          allRowsSelected={allRowsSelected}\n          onAllRowsSelectionChange={selectAllRowsLatest}\n          sortColumns={sortColumns}\n          onSortColumnsChange={onSortColumnsChangeLatest}\n          lastFrozenColumnIndex={lastFrozenColumnIndex}\n          selectedCellIdx={selectedPosition.rowIdx === minRowIdx ? selectedPosition.idx : undefined}\n          selectCell={selectHeaderCellLatest}\n          shouldFocusGrid={!selectedCellIsWithinSelectionBounds}\n          direction={direction}\n        />\n        {rows.length === 0 && noRowsFallback ? (\n          noRowsFallback\n        ) : (\n          <>\n            {topSummaryRows?.map((row, rowIdx) => {\n              const gridRowStart = headerRowsCount + rowIdx + 1;\n              const summaryRowIdx = rowIdx + minRowIdx + 1;\n              const isSummaryRowSelected = selectedPosition.rowIdx === summaryRowIdx;\n              const top = headerRowHeight + summaryRowHeight * rowIdx;\n\n              return (\n                <SummaryRow\n                  aria-rowindex={gridRowStart}\n                  key={rowIdx}\n                  rowIdx={rowIdx}\n                  gridRowStart={gridRowStart}\n                  row={row}\n                  top={top}\n                  bottom={undefined}\n                  lastTopRowIdx={topSummaryRowsCount - 1}\n                  viewportColumns={getRowViewportColumns(summaryRowIdx)}\n                  lastFrozenColumnIndex={lastFrozenColumnIndex}\n                  selectedCellIdx={isSummaryRowSelected ? selectedPosition.idx : undefined}\n                  selectCell={selectTopSummaryCellLatest}\n                />\n              );\n            })}\n            <RowSelectionChangeProvider value={selectRowLatest}>\n              {getViewportRows()}\n            </RowSelectionChangeProvider>\n            {bottomSummaryRows?.map((row, rowIdx) => {\n              const gridRowStart = headerRowsCount + topSummaryRowsCount + rows.length + rowIdx + 1;\n              const summaryRowIdx = rows.length + rowIdx;\n              const isSummaryRowSelected = selectedPosition.rowIdx === summaryRowIdx;\n              const top =\n                clientHeight > totalRowHeight\n                  ? gridHeight - summaryRowHeight * (bottomSummaryRows.length - rowIdx)\n                  : undefined;\n              const bottom =\n                top === undefined\n                  ? summaryRowHeight * (bottomSummaryRows.length - 1 - rowIdx)\n                  : undefined;\n\n              return (\n                <SummaryRow\n                  aria-rowindex={headerRowsCount + topSummaryRowsCount + rowsCount + rowIdx + 1}\n                  key={rowIdx}\n                  rowIdx={rowIdx}\n                  gridRowStart={gridRowStart}\n                  row={row}\n                  top={top}\n                  bottom={bottom}\n                  lastTopRowIdx={undefined}\n                  viewportColumns={getRowViewportColumns(summaryRowIdx)}\n                  lastFrozenColumnIndex={lastFrozenColumnIndex}\n                  selectedCellIdx={isSummaryRowSelected ? selectedPosition.idx : undefined}\n                  selectCell={selectBottomSummaryCellLatest}\n                />\n              );\n            })}\n          </>\n        )}\n\n        {/* render empty cells that span only 1 column so we can safely measure column widths, regardless of colSpan */}\n        {renderMeasuringCells(viewportColumns)}\n      </DataGridDefaultComponentsProvider>\n    </div>\n  );\n}\n\nfunction isSamePosition(p1: Position, p2: Position) {\n  return p1.idx === p2.idx && p1.rowIdx === p2.rowIdx;\n}\n\nexport default forwardRef(DataGrid) as <R, SR = unknown, K extends Key = Key>(\n  props: DataGridProps<R, SR, K> & RefAttributes<DataGridHandle>\n) => JSX.Element;\n","import { css } from '@linaria/core';\nimport type { EditorProps } from '../types';\n\nconst textEditorInternalClassname = css`\n  @layer rdg.TextEditor {\n    appearance: none;\n\n    box-sizing: border-box;\n    inline-size: 100%;\n    block-size: 100%;\n    padding-block: 0;\n    padding-inline: 6px;\n    border: 2px solid #ccc;\n    vertical-align: top;\n    color: var(--rdg-color);\n    background-color: var(--rdg-background-color);\n\n    font-family: inherit;\n    font-size: var(--rdg-font-size);\n\n    &:focus {\n      border-color: var(--rdg-selection-color);\n      outline: none;\n    }\n\n    &::placeholder {\n      color: #999;\n      opacity: 1;\n    }\n  }\n`;\n\nexport const textEditorClassname = `rdg-text-editor ${textEditorInternalClassname}`;\n\nfunction autoFocusAndSelect(input: HTMLInputElement | null) {\n  input?.focus();\n  input?.select();\n}\n\nexport default function textEditor<TRow, TSummaryRow>({\n  row,\n  column,\n  onRowChange,\n  onClose\n}: EditorProps<TRow, TSummaryRow>) {\n  return (\n    <input\n      className={textEditorClassname}\n      ref={autoFocusAndSelect}\n      value={row[column.key as keyof TRow] as unknown as string}\n      onChange={(event) => onRowChange({ ...row, [column.key]: event.target.value })}\n      onBlur={() => onClose(true)}\n    />\n  );\n}\n"],"names":["cell","cellClassname","cellFrozen","cellFrozenClassname","cellFrozenLast","cellFrozenLastClassname","root","rootClassname","viewportDragging","viewportDraggingClassname","focusSinkClassname","row","rowClassname","rowSelected","rowSelectedClassname","rowSelectedWithFrozenCell","checkboxLabel","checkboxLabelClassname","checkboxInput","checkboxInputClassname","checkbox","checkboxClassname","checkboxLabelDisabled","checkboxLabelDisabledClassname","checkboxFormatter","onChange","props","ref","handleChange","e","target","checked","nativeEvent","shiftKey","_jsxs","clsx","disabled","_jsx","useLayoutEffect","window","useEffect","useOriginalLayoutEffect","useFocusRef","isSelected","useRef","current","focus","preventScroll","tabIndex","DataGridDefaultComponentsContext","createContext","undefined","DataGridDefaultComponentsProvider","Provider","useDefaultComponents","useContext","SelectCellFormatter","value","isCellSelected","ariaLabel","ariaLabelledBy","_Fragment","valueFormatter","column","key","groupCellContent","groupCellContentClassname","caret","caretClassname","toggleGroupFormatter","ToggleGroup","groupKey","isExpanded","toggleGroup","handleKeyDown","d","RowSelectionContext","RowSelectionProvider","RowSelectionChangeContext","RowSelectionChangeProvider","useRowSelection","rowSelectionContext","rowSelectionChangeContext","Error","SELECT_COLUMN_KEY","SelectFormatter","isRowSelected","onRowSelectionChange","isShiftClick","SelectGroupFormatter","SelectColumn","name","width","minWidth","maxWidth","resizable","sortable","frozen","headerRenderer","allRowsSelected","onAllRowsSelectionChange","formatter","groupFormatter","getColSpan","lastFrozenColumnIndex","args","colSpan","Number","isInteger","idx","scrollIntoView","element","inline","block","nonInputKeys","Set","isCtrlKeyHeldDown","ctrlKey","metaKey","isDefaultCellInput","event","has","onEditorNavigation","HTMLInputElement","HTMLTextAreaElement","HTMLSelectElement","matches","measuringCellClassname","renderMeasuringCells","viewportColumns","map","gridColumnStart","isSelectedCellEditable","selectedPosition","columns","rows","isGroupRow","rowIdx","isCellEditable","editor","rowGroup","editable","getSelectedCellColSpan","topSummaryRows","bottomSummaryRows","topSummaryRowsCount","length","minRowIdx","type","getNextSelectedCellPosition","cellNavigationMode","colSpanColumns","maxRowIdx","currentPosition","currentIdx","nextPosition","isCellWithinBounds","nextIdx","nextRowIdx","setColSpan","moveRight","colIdx","columnsCount","isAfterLastColumn","isBeforeFirstColumn","isLastRow","isFirstRow","canExitGrid","maxColIdx","atLastCellInRow","atFirstCellInRow","atLastRow","atFirstRow","getRowStyle","height","getCellStyle","gridColumnEnd","insetInlineStart","getCellClassname","extraClasses","isLastFrozenColumn","min","max","round","floor","sign","abs","Math","assertIsValidKeyGetter","keyGetter","clampColumnWidth","DEFAULT_COLUMN_WIDTH","DEFAULT_COLUMN_MIN_WIDTH","useCalculatedColumns","rawColumns","columnWidths","viewportWidth","scrollLeft","defaultColumnOptions","rawGroupBy","enableVirtualization","defaultWidth","defaultMinWidth","defaultMaxWidth","defaultFormatter","defaultSortable","defaultResizable","groupBy","useMemo","rawColumn","includes","sort","aKey","frozenA","bKey","frozenB","indexOf","forEach","push","templateColumns","layoutCssVars","totalFrozenColumnWidth","columnMetrics","Map","left","get","set","columnMetric","gridTemplateColumns","join","i","colOverscanStartIdx","colOverscanEndIdx","viewportLeft","viewportRight","lastColIdx","firstUnfrozenColumnIdx","colVisibleStartIdx","colVisibleEndIdx","useGridDimensions","gridRef","inlineSize","setInlineSize","useState","blockSize","setBlockSize","isWidthInitialized","setWidthInitialized","ResizeObserver","clientWidth","clientHeight","offsetWidth","offsetHeight","getBoundingClientRect","initialWidth","initialHeight","resizeObserver","entries","size","contentBoxSize","observe","disconnect","useLatestFunc","fn","callbackFn","useCallback","useRovingCellRef","isChildFocused","setIsChildFocused","contains","document","activeElement","onFocus","currentTarget","isFocused","useViewportColumns","rowOverscanStartIdx","rowOverscanEndIdx","startIdx","updateStartIdx","flexWidthViewportColumns","unsizedFlexWidthViewportColumns","filter","isReadonlyArray","arr","Array","isArray","useViewportRows","rawRows","rowHeight","scrollTop","rowGrouper","expandedGroupIds","groupedRows","rowsCount","groupRows","groupByKey","remainingGroupByKeys","startRowIndex","groupRowsCount","groups","childRows","Object","childGroups","childRowsCount","allGroupRows","flattenedRows","expandGroup","parentId","level","keys","posInSet","id","groupRow","setSize","add","totalRowHeight","gridTemplateRows","getRowTop","getRowHeight","findRowIdx","offset","rowPositions","currentRowHeight","position","top","validateRowIdx","start","end","middle","currentOffset","overscanThreshold","rowVisibleStartIdx","rowVisibleEndIdx","headerSortCell","headerSortCellClassname","headerSortName","headerSortNameClassname","sortDirection","priority","onSort","SortableHeaderCell","children","sortStatus","preventDefault","handleClick","cellResizable","cellResizableClassname","HeaderCell","onColumnResize","sortColumns","onSortColumnsChange","selectCell","shouldFocusGrid","direction","isRtl","sortIndex","findIndex","columnKey","sortColumn","ariaSort","className","headerCellClass","defaultHeaderRenderer","onPointerDown","pointerType","buttons","pointerId","right","clientX","onPointerMove","onLostPointerCapture","removeEventListener","setPointerCapture","addEventListener","ctrlClick","sortDescendingFirst","nextSort","nextSortColumn","nextSortColumns","splice","onClick","onDoubleClick","handleFocus","headerRow","headerRowClassname","HeaderRow","selectedCellIdx","cells","index","memo","cellCopied","cellCopiedClassname","cellDraggedOver","cellDraggedOverClassname","Cell","isCopied","isDraggedOver","dragHandle","onRowClick","onRowDoubleClick","onRowChange","cellClass","selectCellWrapper","openEditor","editorOptions","editOnClick","handleContextMenu","handleDoubleClick","handleRowChange","newRow","Row","gridRowStart","copiedCellIdx","draggedOverCellIdx","selectedCellEditor","selectedCellDragHandle","rowClass","setDraggedOverRowIdx","onMouseEnter","handleDragEnter","RowComponent","forwardRef","defaultRowRenderer","GroupCell","groupColumnIndex","toggleGroupWrapper","isLevelMatching","cursor","groupRowClassname","GroupedRow","selectGroup","handleSelectGroup","summaryCellClassname","SummaryCell","summaryCellClass","summaryFormatter","summaryRow","topSummaryRow","topSummaryRowBorderClassname","bottomSummaryRowBorderClassname","summaryRowClassname","topSummaryRowClassname","SummaryRow","bottom","lastTopRowIdx","ariaRowIndex","isTop","cellEditing","EditCell","closeEditor","frameRequestRef","commitOnOutsideClick","commitOnOutsideMouseDown","onClose","onWindowCaptureMouseDown","requestAnimationFrame","capture","cancelFrameRequest","cancelAnimationFrame","onKeyDown","stopPropagation","onNavigation","commitChanges","renderFormatter","cellDragHandle","cellDragHandleClassname","DragHandle","latestDraggedOverRowIdx","onRowsChange","onFill","setDragging","handleMouseDown","onMouseOver","onMouseUp","handleDragEnd","overRowIdx","endRowIndex","updateRows","startRowIdx","endRowIdx","sourceRow","updatedRows","indexes","updatedRow","targetRow","arrow","arrowClassname","sortIcon","sortPriority","initialPosition","mode","DataGrid","rowKeyGetter","rawRowHeight","headerRowHeight","rawHeaderRowHeight","summaryRowHeight","rawSummaryRowHeight","selectedRows","onSelectedRowsChange","onExpandedGroupIdsChange","onScroll","onCopy","onPaste","rawCellNavigationMode","rawEnableVirtualization","renderers","style","rawDirection","ariaDescribedBy","testId","defaultComponents","rowRenderer","defaultSortStatus","defaultCheckboxFormatter","noRowsFallback","setScrollTop","setScrollLeft","setColumnWidths","setSelectedPosition","copiedCell","setCopiedCell","isDragging","draggedOverRowIdx","setOverRowIdx","prevSelectedPosition","lastSelectedRowIdx","rowRef","gridWidth","gridHeight","headerRowsCount","bottomSummaryRowsCount","summaryRowsCount","isSelectable","leftKey","rightKey","defaultGridComponents","every","hasGroups","minColIdx","selectedCellIsWithinSelectionBounds","isCellWithinSelectionBounds","selectedCellIsWithinViewportBounds","isCellWithinViewportBounds","handleColumnResizeLatest","handleColumnResize","onSortColumnsChangeLatest","onRowClickLatest","onRowDoubleClickLatest","selectRowLatest","selectRow","selectAllRowsLatest","selectAllRows","handleFormatterRowChangeLatest","updateRow","selectViewportCellLatest","enableEditor","selectGroupLatest","selectHeaderCellLatest","selectTopSummaryCellLatest","selectBottomSummaryCellLatest","toggleGroupLatest","isSamePosition","newColumnWidths","grid","measuringCell","querySelector","useImperativeHandle","scrollToColumn","scrollToRow","scrollTo","behavior","newTemplateColumns","measuredWidth","measuredWidthPx","newSelectedRows","childRow","rowKey","delete","previousRowIdx","step","expandedGroupId","newExpandedGroupIds","Element","isCellEvent","closest","isRowEvent","keyCode","cKey","vKey","handleCopy","handlePaste","isRowIdxWithinViewportBounds","navigate","handleCellInput","handleScroll","flushSync","getRawRowIdx","rawRowIdx","commitEditorChanges","sourceColumnKey","targetColumn","updatedTargetRow","targetColumnKey","onCellKeyDown","isDefaultPrevented","originalRow","isColIdxWithinSelectionBounds","isCellAtLeftBoundary","isCellAtRightBoundary","getNextPosition","parentRowIdx","parentRow","nextRowY","nextSelectedCellPosition","getDraggedOverCellIdx","currentRowIdx","getLayoutCssVars","getDragHandle","getCellEditor","getRowViewportColumns","selectedColumn","slice","getViewportRows","rowElements","selectedIdx","selectedRowIdx","viewportRowIdx","isRowOutsideViewport","rowColumns","isGroupRowSelected","cr","c","templateRows","isGroupRowFocused","scrollPaddingInlineStart","scrollPaddingBlock","summaryRowIdx","isSummaryRowSelected","p1","p2","textEditorInternalClassname","textEditorClassname","autoFocusAndSelect","input","select","textEditor"],"mappings":"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"}